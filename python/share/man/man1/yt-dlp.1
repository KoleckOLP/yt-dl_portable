.\"t
.\" Automatically generated by Pandoc 2.5
.\"
.TH "yt\-dlp" "1" "" "" ""
.hy
.SH NAME
.PP
youtube\-dl \- download videos from youtube.com or other video platforms
.SH SYNOPSIS
.PP
\f[B]yt\-dlp\f[R] [OPTIONS] URL [URL...]
.PP
[IMAGE: YT\-DLP (https://raw.githubusercontent.com/yt-dlp/yt-dlp/master/.github/banner.svg)]
.PP
[IMAGE: Release
version (https://img.shields.io/github/v/release/yt-dlp/yt-dlp?color=blue&label=&style=for-the-badge)] (https://github.com/yt-dlp/yt-dlp/releases/latest)
[IMAGE: CI
Status (https://img.shields.io/github/workflow/status/yt-dlp/yt-dlp/Core%20Tests/master?label=&style=for-the-badge)] (https://github.com/yt-dlp/yt-dlp/actions)
[IMAGE: License:
Unlicense (https://img.shields.io/badge/-Unlicense-blue.svg?style=for-the-badge)] (LICENSE)
[IMAGE: Donate (https://img.shields.io/badge/_-Donate-red.svg?logo=githubsponsors&labelColor=555555&style=for-the-badge)] (Collaborators.md#collaborators)
[IMAGE: Supported
Sites (https://img.shields.io/badge/-Supported_Sites-brightgreen.svg?style=for-the-badge)] (supportedsites.md)
[IMAGE: Discord (https://img.shields.io/discord/807245652072857610?color=blue&label=â€‹&logo=discord&style=for-the-badge)] (https://discord.gg/H5MNcFW63r)
[IMAGE: Doc
Status (https://readthedocs.org/projects/yt-dlp/badge/?version=latest&style=for-the-badge)] (https://yt-dlp.readthedocs.io)
[IMAGE: Commits (https://img.shields.io/github/commit-activity/m/yt-dlp/yt-dlp?label=commits&style=for-the-badge)] (https://github.com/yt-dlp/yt-dlp/commits)
[IMAGE: Last
Commit (https://img.shields.io/github/last-commit/yt-dlp/yt-dlp/master?label=&style=for-the-badge)] (https://github.com/yt-dlp/yt-dlp/commits)
[IMAGE: Downloads (https://img.shields.io/github/downloads/yt-dlp/yt-dlp/total?style=for-the-badge&color=blue)] (https://github.com/yt-dlp/yt-dlp/releases/latest)
[IMAGE: PyPi
Downloads (https://img.shields.io/pypi/dm/yt-dlp?label=PyPi&style=for-the-badge)] (https://pypi.org/project/yt-dlp)
.PP
yt\-dlp is a youtube\-dl (https://github.com/ytdl-org/youtube-dl) fork
based on the now inactive
youtube\-dlc (https://github.com/blackjack4494/yt-dlc).
The main focus of this project is adding new features and patches while
also keeping up to date with the original project
.IP \[bu] 2
NEW FEATURES
.RS 2
.IP \[bu] 2
Differences in default behavior
.RE
.IP \[bu] 2
INSTALLATION
.RS 2
.IP \[bu] 2
Update
.IP \[bu] 2
Release Files
.IP \[bu] 2
Dependencies
.IP \[bu] 2
Compile
.RE
.IP \[bu] 2
USAGE AND OPTIONS
.RS 2
.IP \[bu] 2
General Options
.IP \[bu] 2
Network Options
.IP \[bu] 2
Geo\-restriction
.IP \[bu] 2
Video Selection
.IP \[bu] 2
Download Options
.IP \[bu] 2
Filesystem Options
.IP \[bu] 2
Thumbnail Options
.IP \[bu] 2
Internet Shortcut Options
.IP \[bu] 2
Verbosity and Simulation Options
.IP \[bu] 2
Workarounds
.IP \[bu] 2
Video Format Options
.IP \[bu] 2
Subtitle Options
.IP \[bu] 2
Authentication Options
.IP \[bu] 2
Post\-processing Options
.IP \[bu] 2
SponsorBlock Options
.IP \[bu] 2
Extractor Options
.RE
.IP \[bu] 2
CONFIGURATION
.RS 2
.IP \[bu] 2
Authentication with .netrc file
.RE
.IP \[bu] 2
OUTPUT TEMPLATE
.RS 2
.IP \[bu] 2
Output template and Windows batch files
.IP \[bu] 2
Output template examples
.RE
.IP \[bu] 2
FORMAT SELECTION
.RS 2
.IP \[bu] 2
Filtering Formats
.IP \[bu] 2
Sorting Formats
.IP \[bu] 2
Format Selection examples
.RE
.IP \[bu] 2
MODIFYING METADATA
.RS 2
.IP \[bu] 2
Modifying metadata examples
.RE
.IP \[bu] 2
EXTRACTOR ARGUMENTS
.IP \[bu] 2
PLUGINS
.IP \[bu] 2
EMBEDDING YT\-DLP
.IP \[bu] 2
DEPRECATED OPTIONS
.IP \[bu] 2
CONTRIBUTING (CONTRIBUTING.md#contributing-to-yt-dlp)
.RS 2
.IP \[bu] 2
Opening an Issue (CONTRIBUTING.md#opening-an-issue)
.IP \[bu] 2
Developer Instructions (CONTRIBUTING.md#developer-instructions)
.RE
.IP \[bu] 2
MORE
.RS 2
.RE
.SH NEW FEATURES
.PP
The major new features from the latest release of
blackjack4494/yt\-dlc (https://github.com/blackjack4494/yt-dlc) are:
.IP \[bu] 2
\f[B]SponsorBlock Integration\f[R]: You can mark/remove sponsor sections
in youtube videos by utilizing the
SponsorBlock (https://sponsor.ajay.app) API
.IP \[bu] 2
\f[B]Format Sorting\f[R]: The default format sorting options have been
changed so that higher resolution and better codecs will be now
preferred instead of simply using larger bitrate.
Furthermore, you can now specify the sort order using \f[C]\-S\f[R].
This allows for much easier format selection than what is possible by
simply using \f[C]\-\-format\f[R] (examples)
.IP \[bu] 2
\f[B]Merged with youtube\-dl
commit/379f52a (https://github.com/ytdl-org/youtube-dl/commit/379f52a4954013767219d25099cce9e0f9401961)\f[R]:
(v2021.06.06) You get all the latest features and patches of
youtube\-dl (https://github.com/ytdl-org/youtube-dl) in addition to all
the features of youtube\-dlc (https://github.com/blackjack4494/yt-dlc)
.IP \[bu] 2
\f[B]Merged with animelover1984/youtube\-dl\f[R]: You get most of the
features and improvements from
animelover1984/youtube\-dl (https://github.com/animelover1984/youtube-dl)
including \f[C]\-\-write\-comments\f[R], \f[C]BiliBiliSearch\f[R],
\f[C]BilibiliChannel\f[R], Embedding thumbnail in mp4/ogg/opus, playlist
infojson etc.
Note that the NicoNico improvements are not available.
See #31 (https://github.com/yt-dlp/yt-dlp/pull/31) for details.
.IP \[bu] 2
\f[B]Youtube improvements\f[R]:
.RS 2
.IP \[bu] 2
All Feeds (\f[C]:ytfav\f[R], \f[C]:ytwatchlater\f[R], \f[C]:ytsubs\f[R],
\f[C]:ythistory\f[R], \f[C]:ytrec\f[R]) and private playlists supports
downloading multiple pages of content
.IP \[bu] 2
Search (\f[C]ytsearch:\f[R], \f[C]ytsearchdate:\f[R]), search URLs and
in\-channel search works
.IP \[bu] 2
Mixes supports downloading multiple pages of content
.IP \[bu] 2
Most (but not all) age\-gated content can be downloaded without cookies
.IP \[bu] 2
Partial workaround for throttling issue
.IP \[bu] 2
Redirect channel\[aq]s home URL automatically to \f[C]/video\f[R] to
preserve the old behaviour
.IP \[bu] 2
\f[C]255kbps\f[R] audio is extracted (if available) from youtube music
when premium cookies are given
.IP \[bu] 2
Youtube music Albums, channels etc can be downloaded (except
self\-uploaded music (https://github.com/yt-dlp/yt-dlp/issues/723))
.RE
.IP \[bu] 2
\f[B]Cookies from browser\f[R]: Cookies can be automatically extracted
from all major web browsers using
\f[C]\-\-cookies\-from\-browser BROWSER[:PROFILE]\f[R]
.IP \[bu] 2
\f[B]Split video by chapters\f[R]: Videos can be split into multiple
files based on chapters using \f[C]\-\-split\-chapters\f[R]
.IP \[bu] 2
\f[B]Multi\-threaded fragment downloads\f[R]: Download multiple
fragments of m3u8/mpd videos in parallel.
Use \f[C]\-\-concurrent\-fragments\f[R] (\f[C]\-N\f[R]) option to set
the number of threads used
.IP \[bu] 2
\f[B]Aria2c with HLS/DASH\f[R]: You can use \f[C]aria2c\f[R] as the
external downloader for DASH(mpd) and HLS(m3u8) formats
.IP \[bu] 2
\f[B]New extractors\f[R]: AnimeLab, Philo MSO, Spectrum MSO, SlingTV
MSO, Cablevision MSO, RCN MSO, Rcs, Gedi, bitwave.tv, mildom, audius,
zee5, mtv.it, wimtv, pluto.tv, niconico users, discoveryplus.in,
mediathek, NFHSNetwork, nebula, ukcolumn, whowatch, MxplayerShow,
parlview (au), YoutubeWebArchive, fancode, Saitosan, ShemarooMe,
telemundo, VootSeries, SonyLIVSeries, HotstarSeries, VidioPremier,
VidioLive, RCTIPlus, TBS Live, douyin, pornflip, ParamountPlusSeries,
ScienceChannel, Utreon, OpenRec, BandcampMusic, blackboardcollaborate,
eroprofile albums, mirrativ, BannedVideo, bilibili categories, Epicon,
filmmodu, GabTV, HungamaAlbum, ManotoTV, Niconico search, Patreon User,
peloton, ProjectVeritas, radiko, StarTV, tiktok user, Tokentube, voicy,
TV2HuSeries, biliintl, 17live, NewgroundsUser, peertube
channel/playlist, ZenYandex, CAM4, CGTN, damtomo, gotostage, Koo,
Mediaite, Mediaklikk, MuseScore, nzherald, Olympics replay, radlive,
SovietsCloset, Streamanity, Theta, Chingari, ciscowebex, Gettr, GoPro,
N1, Theta, Veo, Vupload, NovaPlay, SkyNewsAU, EUScreen, Gronkh,
microsoftstream, on24, trovo channels
.IP \[bu] 2
\f[B]Fixed/improved extractors\f[R]: archive.org, roosterteeth.com,
skyit, instagram, itv, SouthparkDe, spreaker, Vlive, akamai, ina,
rumble, tennistv, amcnetworks, la7 podcasts, linuxacadamy, nitter,
twitcasting, viu, crackle, curiositystream, mediasite, rmcdecouverte,
sonyliv, tubi, tenplay, patreon, videa, yahoo, BravoTV, crunchyroll,
RTP, viki, Hotstar, vidio, vimeo, mediaset, Mxplayer, nbcolympics,
ParamountPlus, Newgrounds, SAML Verizon login, Hungama, afreecatv,
aljazeera, ATV, bitchute, camtube, CDA, eroprofile, facebook,
HearThisAtIE, iwara, kakao, Motherless, Nova, peertube, pornhub, reddit,
tiktok, TV2, TV2Hu, tv5mondeplus, VH1, Viafree, XHamster, 9Now,
AnimalPlanet, Arte, CBC, Chingari, comedycentral, DIYNetwork, niconico,
dw, funimation, globo, HiDive, NDR, Nuvid, Oreilly, pbs, plutotv,
reddit, redtube, soundcloud, SpankBang, VrtNU, bbc, Bilibili,
LinkedInLearning, parliamentlive, PolskieRadio, Streamable, vidme,
francetv, 7plus, tagesschau
.IP \[bu] 2
\f[B]Subtitle extraction from manifests\f[R]: Subtitles can be extracted
from streaming media manifests.
See
commit/be6202f (https://github.com/yt-dlp/yt-dlp/commit/be6202f12b97858b9d716e608394b51065d0419f)
for details
.IP \[bu] 2
\f[B]Multiple paths and output templates\f[R]: You can give different
output templates and download paths for different types of files.
You can also set a temporary path where intermediary files are
downloaded to using \f[C]\-\-paths\f[R] (\f[C]\-P\f[R])
.IP \[bu] 2
\f[B]Portable Configuration\f[R]: Configuration files are automatically
loaded from the home and root directories.
See configuration for details
.IP \[bu] 2
\f[B]Output template improvements\f[R]: Output templates can now have
date\-time formatting, numeric offsets, object traversal etc.
See output template for details.
Even more advanced operations can also be done with the help of
\f[C]\-\-parse\-metadata\f[R] and \f[C]\-\-replace\-in\-metadata\f[R]
.IP \[bu] 2
\f[B]Other new options\f[R]: \f[C]\-\-print\f[R],
\f[C]\-\-sleep\-requests\f[R], \f[C]\-\-convert\-thumbnails\f[R],
\f[C]\-\-write\-link\f[R], \f[C]\-\-force\-download\-archive\f[R],
\f[C]\-\-force\-overwrites\f[R], \f[C]\-\-break\-on\-reject\f[R] etc
.IP \[bu] 2
\f[B]Improvements\f[R]: Regex and other operators in
\f[C]\-\-match\-filter\f[R], multiple \f[C]\-\-postprocessor\-args\f[R]
and \f[C]\-\-downloader\-args\f[R], faster archive checking, more format
selection options etc
.IP \[bu] 2
\f[B]Plugin extractors\f[R]: Extractors can be loaded from an external
file.
See plugins for details
.IP \[bu] 2
\f[B]Self\-updater\f[R]: The releases can be updated using
\f[C]yt\-dlp \-U\f[R]
.PP
See changelog (Changelog.md) or
commits (https://github.com/yt-dlp/yt-dlp/commits) for the full list of
changes
.PP
\f[B]PS\f[R]: Some of these changes are already in youtube\-dlc, but are
still unreleased.
See this (Changelog.md#unreleased-changes-in-blackjack4494yt-dlc) for
details
.PP
If you are coming from
youtube\-dl (https://github.com/ytdl-org/youtube-dl), the amount of
changes are very large.
Compare options and supported sites (supportedsites.md) with
youtube\-dl\[aq]s to get an idea of the massive number of
features/patches youtube\-dlc (https://github.com/blackjack4494/yt-dlc)
has accumulated.
.SS Differences in default behavior
.PP
Some of yt\-dlp\[aq]s default options are different from that of
youtube\-dl and youtube\-dlc.
.IP \[bu] 2
The options \f[C]\-\-id\f[R], \f[C]\-\-auto\-number\f[R]
(\f[C]\-A\f[R]), \f[C]\-\-title\f[R] (\f[C]\-t\f[R]) and
\f[C]\-\-literal\f[R] (\f[C]\-l\f[R]), no longer work.
See removed options for details
.IP \[bu] 2
\f[C]avconv\f[R] is not supported as as an alternative to
\f[C]ffmpeg\f[R]
.IP \[bu] 2
The default output template is \f[C]%(title)s [%(id)s].%(ext)s\f[R].
There is no real reason for this change.
This was changed before yt\-dlp was ever made public and now there are
no plans to change it back to \f[C]%(title)s.%(id)s.%(ext)s\f[R].
Instead, you may use \f[C]\-\-compat\-options filename\f[R]
.IP \[bu] 2
The default format sorting is different from youtube\-dl and prefers
higher resolution and better codecs rather than higher bitrates.
You can use the \f[C]\-\-format\-sort\f[R] option to change this to any
order you prefer, or use \f[C]\-\-compat\-options format\-sort\f[R] to
use youtube\-dl\[aq]s sorting order
.IP \[bu] 2
The default format selector is \f[C]bv*+ba/b\f[R].
This means that if a combined video + audio format that is better than
the best video\-only format is found, the former will be prefered.
Use \f[C]\-f bv+ba/b\f[R] or \f[C]\-\-compat\-options format\-spec\f[R]
to revert this
.IP \[bu] 2
Unlike youtube\-dlc, yt\-dlp does not allow merging multiple audio/video
streams into one file by default (since this conflicts with the use of
\f[C]\-f bv*+ba\f[R]).
If needed, this feature must be enabled using
\f[C]\-\-audio\-multistreams\f[R] and \f[C]\-\-video\-multistreams\f[R].
You can also use \f[C]\-\-compat\-options multistreams\f[R] to enable
both
.IP \[bu] 2
\f[C]\-\-ignore\-errors\f[R] is enabled by default.
Use \f[C]\-\-abort\-on\-error\f[R] or
\f[C]\-\-compat\-options abort\-on\-error\f[R] to abort on errors
instead
.IP \[bu] 2
When writing metadata files such as thumbnails, description or infojson,
the same information (if available) is also written for playlists.
Use \f[C]\-\-no\-write\-playlist\-metafiles\f[R] or
\f[C]\-\-compat\-options no\-playlist\-metafiles\f[R] to not write these
files
.IP \[bu] 2
\f[C]\-\-add\-metadata\f[R] attaches the \f[C]infojson\f[R] to
\f[C]mkv\f[R] files in addition to writing the metadata when used with
\f[C]\-\-write\-infojson\f[R].
Use \f[C]\-\-compat\-options no\-attach\-info\-json\f[R] to revert this
.IP \[bu] 2
\f[C]playlist_index\f[R] behaves differently when used with options like
\f[C]\-\-playlist\-reverse\f[R] and \f[C]\-\-playlist\-items\f[R].
See #302 (https://github.com/yt-dlp/yt-dlp/issues/302) for details.
You can use \f[C]\-\-compat\-options playlist\-index\f[R] if you want to
keep the earlier behavior
.IP \[bu] 2
The output of \f[C]\-F\f[R] is listed in a new format.
Use \f[C]\-\-compat\-options list\-formats\f[R] to revert this
.IP \[bu] 2
All \f[I]experiences\f[R] of a funimation episode are considered as a
single video.
This behavior breaks existing archives.
Use \f[C]\-\-compat\-options seperate\-video\-versions\f[R] to extract
information from only the default player
.IP \[bu] 2
Youtube live chat (if available) is considered as a subtitle.
Use \f[C]\-\-sub\-langs all,\-live_chat\f[R] to download all subtitles
except live chat.
You can also use \f[C]\-\-compat\-options no\-live\-chat\f[R] to prevent
live chat from downloading
.IP \[bu] 2
Youtube channel URLs are automatically redirected to \f[C]/video\f[R].
Append a \f[C]/featured\f[R] to the URL to download only the videos in
the home page.
If the channel does not have a videos tab, we try to download the
equivalent \f[C]UU\f[R] playlist instead.
Also, \f[C]/live\f[R] URLs raise an error if there are no live videos
instead of silently downloading the entire channel.
You may use \f[C]\-\-compat\-options no\-youtube\-channel\-redirect\f[R]
to revert all these redirections
.IP \[bu] 2
Unavailable videos are also listed for youtube playlists.
Use \f[C]\-\-compat\-options no\-youtube\-unavailable\-videos\f[R] to
remove this
.IP \[bu] 2
If \f[C]ffmpeg\f[R] is used as the downloader, the downloading and
merging of formats happen in a single step when possible.
Use \f[C]\-\-compat\-options no\-direct\-merge\f[R] to revert this
.IP \[bu] 2
Thumbnail embedding in \f[C]mp4\f[R] is done with mutagen if possible.
Use \f[C]\-\-compat\-options embed\-thumbnail\-atomicparsley\f[R] to
force the use of AtomicParsley instead
.IP \[bu] 2
Some private fields such as filenames are removed by default from the
infojson.
Use \f[C]\-\-no\-clean\-infojson\f[R] or
\f[C]\-\-compat\-options no\-clean\-infojson\f[R] to revert this
.IP \[bu] 2
When \f[C]\-\-embed\-subs\f[R] and \f[C]\-\-write\-subs\f[R] are used
together, the subtitles are written to disk and also embedded in the
media file.
You can use just \f[C]\-\-embed\-subs\f[R] to embed the subs and
automatically delete the seperate file.
See #630
(comment) (https://github.com/yt-dlp/yt-dlp/issues/630#issuecomment-893659460)
for more info.
\f[C]\-\-compat\-options no\-keep\-subs\f[R] can be used to revert this.
.PP
For ease of use, a few more compat options are available: *
\f[C]\-\-compat\-options all\f[R]: Use all compat options *
\f[C]\-\-compat\-options youtube\-dl\f[R]: Same as
\f[C]\-\-compat\-options all,\-multistreams\f[R] *
\f[C]\-\-compat\-options youtube\-dlc\f[R]: Same as
\f[C]\-\-compat\-options all,\-no\-live\-chat,\-no\-youtube\-channel\-redirect\f[R]
.SH INSTALLATION
.PP
yt\-dlp is not platform specific.
So it should work on your Unix box, on Windows or on macOS
.PP
You can install yt\-dlp using one of the following methods: * Download
the binary from the latest
release (https://github.com/yt-dlp/yt-dlp/releases/latest) * With
Homebrew, \f[C]brew install yt\-dlp/taps/yt\-dlp\f[R] * Use PyPI
package (https://pypi.org/project/yt-dlp):
\f[C]python3 \-m pip install \-\-upgrade yt\-dlp\f[R] * Install master
branch:
\f[C]python3 \-m pip3 install \-U https://github.com/yt\-dlp/yt\-dlp/archive/master.zip\f[R]
.PP
Note that on some systems, you may need to use \f[C]py\f[R] or
\f[C]python\f[R] instead of \f[C]python3\f[R]
.PP
UNIX users (Linux, macOS, BSD) can also install the latest
release (https://github.com/yt-dlp/yt-dlp/releases/latest) one of the
following ways:
.IP
.nf
\f[C]
sudo curl \-L https://github.com/yt\-dlp/yt\-dlp/releases/latest/download/yt\-dlp \-o /usr/local/bin/yt\-dlp
sudo chmod a+rx /usr/local/bin/yt\-dlp
\f[R]
.fi
.IP
.nf
\f[C]
sudo wget https://github.com/yt\-dlp/yt\-dlp/releases/latest/download/yt\-dlp \-O /usr/local/bin/yt\-dlp
sudo chmod a+rx /usr/local/bin/yt\-dlp
\f[R]
.fi
.IP
.nf
\f[C]
sudo aria2c https://github.com/yt\-dlp/yt\-dlp/releases/latest/download/yt\-dlp \-o /usr/local/bin/yt\-dlp
sudo chmod a+rx /usr/local/bin/yt\-dlp
\f[R]
.fi
.PP
macOS or Linux users that are using Homebrew (formerly known as
Linuxbrew for Linux users) can also install it by:
.IP
.nf
\f[C]
brew install yt\-dlp/taps/yt\-dlp
\f[R]
.fi
.SS UPDATE
.PP
You can use \f[C]yt\-dlp \-U\f[R] to update if you are using the
provided release.
If you are using \f[C]pip\f[R], simply re\-run the same command that was
used to install the program.
If you have installed using Homebrew, run
\f[C]brew upgrade yt\-dlp/taps/yt\-dlp\f[R]
.SS RELEASE FILES
.SS Recommended
.PP
.TS
tab(@);
lw(35.0n) lw(35.0n).
T{
File
T}@T{
Description
T}
_
T{
yt\-dlp (https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp)
T}@T{
Platform independant binary.
Needs Python (Recommended for \f[B]UNIX\-like systems\f[R])
T}
T{
yt\-dlp.exe (https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp.exe)
T}@T{
Windows standalone x64 binary (Recommended for \f[B]Windows\f[R])
T}
.TE
.SS Alternatives
.PP
.TS
tab(@);
lw(35.0n) lw(35.0n).
T{
File
T}@T{
Description
T}
_
T{
yt\-dlp_macos (https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp_macos)
T}@T{
MacOS standalone executable
T}
T{
yt\-dlp_x86.exe (https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp_x86.exe)
T}@T{
Windows standalone x86 (32bit) binary
T}
T{
yt\-dlp_min.exe (https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp_min.exe)
T}@T{
Windows standalone x64 binary built with \f[C]py2exe\f[R]. Does not
contain \f[C]pycryptodomex\f[R], needs VC++14
T}
T{
yt\-dlp_win.zip (https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp_win.zip)
T}@T{
Unpackaged windows executable (No auto\-update)
T}
T{
yt\-dlp_macos.zip (https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp_macos.zip)
T}@T{
Unpackaged MacOS executable (No auto\-update)
T}
.TE
.SS Misc
.PP
.TS
tab(@);
l l.
T{
File
T}@T{
Description
T}
_
T{
yt\-dlp.tar.gz (https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp.tar.gz)
T}@T{
Source tarball.
Also contains manpages, completions, etc
T}
T{
SHA2\-512SUMS (https://github.com/yt-dlp/yt-dlp/releases/latest/download/SHA2-512SUMS)
T}@T{
GNU\-style SHA512 sums
T}
T{
SHA2\-256SUMS (https://github.com/yt-dlp/yt-dlp/releases/latest/download/SHA2-256SUMS)
T}@T{
GNU\-style SHA256 sums
T}
.TE
.SS DEPENDENCIES
.PP
Python versions 3.6+ (CPython and PyPy) are supported.
Other versions and implementations may or may not work correctly.
.PP
While all the other dependancies are optional, \f[C]ffmpeg\f[R] and
\f[C]ffprobe\f[R] are highly recommended * \f[B]ffmpeg\f[R] and
\f[B]ffprobe\f[R] (https://www.ffmpeg.org) \- Required for merging
seperate video and audio files as well as for various post\-processing
tasks.
Licence depends on the build (https://www.ffmpeg.org/legal.html) *
\f[B]mutagen\f[R] (https://github.com/quodlibet/mutagen) \- For
embedding thumbnail in certain formats.
Licenced under
GPLv2+ (https://github.com/quodlibet/mutagen/blob/master/COPYING) *
\f[B]pycryptodomex\f[R] (https://github.com/Legrandin/pycryptodome) \-
For decrypting AES\-128 HLS streams and various other data.
Licenced under
BSD2 (https://github.com/Legrandin/pycryptodome/blob/master/LICENSE.rst)
* \f[B]websockets\f[R] (https://github.com/aaugustin/websockets) \- For
downloading over websocket.
Licenced under
BSD3 (https://github.com/aaugustin/websockets/blob/main/LICENSE) *
\f[B]keyring\f[R] (https://github.com/jaraco/keyring) \- For decrypting
cookies of chromium\-based browsers on Linux.
Licenced under MIT (https://github.com/jaraco/keyring/blob/main/LICENSE)
* \f[B]AtomicParsley\f[R] (https://github.com/wez/atomicparsley) \- For
embedding thumbnail in mp4/m4a if mutagen is not present.
Licenced under
GPLv2+ (https://github.com/wez/atomicparsley/blob/master/COPYING) *
\f[B]rtmpdump\f[R] (http://rtmpdump.mplayerhq.hu) \- For downloading
\f[C]rtmp\f[R] streams.
ffmpeg will be used as a fallback.
Licenced under GPLv2+ (http://rtmpdump.mplayerhq.hu) *
\f[B]mplayer\f[R] (http://mplayerhq.hu/design7/info.html) or
\f[B]mpv\f[R] (https://mpv.io) \- For downloading \f[C]rstp\f[R]
streams.
ffmpeg will be used as a fallback.
Licenced under
GPLv2+ (https://github.com/mpv-player/mpv/blob/master/Copyright) *
\f[B]phantomjs\f[R] (https://github.com/ariya/phantomjs) \- Used in
extractors where javascript needs to be run.
Licenced under
BSD3 (https://github.com/ariya/phantomjs/blob/master/LICENSE.BSD) *
\f[B]sponskrub\f[R] (https://github.com/faissaloo/SponSkrub) \- For
using the now \f[B]deprecated\f[R] sponskrub options.
Licenced under
GPLv3+ (https://github.com/faissaloo/SponSkrub/blob/master/LICENCE.md) *
Any external downloader that you want to use with
\f[C]\-\-downloader\f[R]
.PP
To use or redistribute the dependencies, you must agree to their
respective licensing terms.
.PP
The windows releases are already built with the python interpreter,
mutagen, pycryptodomex and websockets included.
.PP
\f[B]Note\f[R]: There are some regressions in newer ffmpeg versions that
causes various issues when used alongside yt\-dlp.
Since ffmpeg is such an important dependancy, we provide custom
builds (https://github.com/yt-dlp/FFmpeg-Builds/wiki/Latest#latest-autobuilds)
with patches for these issues at
yt\-dlp/FFmpeg\-Builds (https://github.com/yt-dlp/FFmpeg-Builds).
See the readme (https://github.com/yt-dlp/FFmpeg-Builds#patches-applied)
for details on the specifc issues solved by these builds
.SS COMPILE
.PP
\f[B]For Windows\f[R]: To build the Windows executable, you must have
pyinstaller (and optionally mutagen, pycryptodomex, websockets).
Once you have all the necessary dependencies installed, (optionally)
build lazy extractors using
\f[C]devscripts/make_lazy_extractors.py\f[R], and then just run
\f[C]pyinst.py\f[R].
The executable will be built for the same architecture (32/64 bit) as
the python used to build it.
.IP
.nf
\f[C]
py \-m pip install \-U pyinstaller \-r requirements.txt
py devscripts/make_lazy_extractors.py
py pyinst.py
\f[R]
.fi
.PP
Note that pyinstaller does not
support (https://github.com/pyinstaller/pyinstaller#requirements-and-tested-platforms)
Python installed from the Windows store without using a virtual
environment
.PP
\f[B]For Unix\f[R]: You will need the required build tools:
\f[C]python\f[R], \f[C]make\f[R] (GNU), \f[C]pandoc\f[R], \f[C]zip\f[R],
\f[C]pytest\f[R]
.PD 0
.P
.PD
Then simply run \f[C]make\f[R].
You can also run \f[C]make yt\-dlp\f[R] instead to compile only the
binary without updating any of the additional files
.PP
\f[B]Note\f[R]: In either platform,
\f[C]devscripts/update\-version.py\f[R] can be used to automatically
update the version number
.SH USAGE AND OPTIONS
.IP
.nf
\f[C]
yt\-dlp [OPTIONS] [\-\-] URL [URL...]
\f[R]
.fi
.PP
\f[C]Ctrl+F\f[R] is your friend :D
.SS General Options:
.IP
.nf
\f[C]
\-h, \-\-help                       Print this help text and exit
\-\-version                        Print program version and exit
\-U, \-\-update                     Update this program to latest version. Make
                                 sure that you have sufficient permissions
                                 (run with sudo if needed)
\-i, \-\-ignore\-errors              Ignore download and postprocessing errors.
                                 The download will be considered successfull
                                 even if the postprocessing fails
\-\-no\-abort\-on\-error              Continue with next video on download
                                 errors; e.g. to skip unavailable videos in
                                 a playlist (default)
\-\-abort\-on\-error                 Abort downloading of further videos if an
                                 error occurs (Alias: \-\-no\-ignore\-errors)
\-\-dump\-user\-agent                Display the current user\-agent and exit
\-\-list\-extractors                List all supported extractors and exit
\-\-extractor\-descriptions         Output descriptions of all supported
                                 extractors and exit
\-\-force\-generic\-extractor        Force extraction to use the generic
                                 extractor
\-\-default\-search PREFIX          Use this prefix for unqualified URLs. For
                                 example \[dq]gvsearch2:\[dq] downloads two videos
                                 from google videos for the search term
                                 \[dq]large apple\[dq]. Use the value \[dq]auto\[dq] to let
                                 yt\-dlp guess (\[dq]auto_warning\[dq] to emit a
                                 warning when guessing). \[dq]error\[dq] just throws
                                 an error. The default value \[dq]fixup_error\[dq]
                                 repairs broken URLs, but emits an error if
                                 this is not possible instead of searching
\-\-ignore\-config                  Disable loading any configuration files
                                 except the one provided by \-\-config\-
                                 location. When given inside a configuration
                                 file, no further configuration files are
                                 loaded. Additionally, (for backward
                                 compatibility) if this option is found
                                 inside the system configuration file, the
                                 user configuration is not loaded
\-\-config\-location PATH           Location of the main configuration file;
                                 either the path to the config or its
                                 containing directory
\-\-flat\-playlist                  Do not extract the videos of a playlist,
                                 only list them
\-\-no\-flat\-playlist               Extract the videos of a playlist
\-\-mark\-watched                   Mark videos watched (even with \-\-simulate).
                                 Currently only supported for YouTube
\-\-no\-mark\-watched                Do not mark videos watched (default)
\-\-no\-colors                      Do not emit color codes in output
\-\-compat\-options OPTS            Options that can help keep compatibility
                                 with youtube\-dl or youtube\-dlc
                                 configurations by reverting some of the
                                 changes made in yt\-dlp. See \[dq]Differences in
                                 default behavior\[dq] for details
\f[R]
.fi
.SS Network Options:
.IP
.nf
\f[C]
\-\-proxy URL                      Use the specified HTTP/HTTPS/SOCKS proxy.
                                 To enable SOCKS proxy, specify a proper
                                 scheme. For example
                                 socks5://127.0.0.1:1080/. Pass in an empty
                                 string (\-\-proxy \[dq]\[dq]) for direct connection
\-\-socket\-timeout SECONDS         Time to wait before giving up, in seconds
\-\-source\-address IP              Client\-side IP address to bind to
\-4, \-\-force\-ipv4                 Make all connections via IPv4
\-6, \-\-force\-ipv6                 Make all connections via IPv6
\f[R]
.fi
.SS Geo\-restriction:
.IP
.nf
\f[C]
\-\-geo\-verification\-proxy URL     Use this proxy to verify the IP address for
                                 some geo\-restricted sites. The default
                                 proxy specified by \-\-proxy (or none, if the
                                 option is not present) is used for the
                                 actual downloading
\-\-geo\-bypass                     Bypass geographic restriction via faking
                                 X\-Forwarded\-For HTTP header
\-\-no\-geo\-bypass                  Do not bypass geographic restriction via
                                 faking X\-Forwarded\-For HTTP header
\-\-geo\-bypass\-country CODE        Force bypass geographic restriction with
                                 explicitly provided two\-letter ISO 3166\-2
                                 country code
\-\-geo\-bypass\-ip\-block IP_BLOCK   Force bypass geographic restriction with
                                 explicitly provided IP block in CIDR
                                 notation
\f[R]
.fi
.SS Video Selection:
.IP
.nf
\f[C]
\-\-playlist\-start NUMBER          Playlist video to start at (default is 1)
\-\-playlist\-end NUMBER            Playlist video to end at (default is last)
\-\-playlist\-items ITEM_SPEC       Playlist video items to download. Specify
                                 indices of the videos in the playlist
                                 separated by commas like: \[dq]\-\-playlist\-items
                                 1,2,5,8\[dq] if you want to download videos
                                 indexed 1, 2, 5, 8 in the playlist. You can
                                 specify range: \[dq]\-\-playlist\-items
                                 1\-3,7,10\-13\[dq], it will download the videos
                                 at index 1, 2, 3, 7, 10, 11, 12 and 13
\-\-max\-downloads NUMBER           Abort after downloading NUMBER files
\-\-min\-filesize SIZE              Do not download any videos smaller than
                                 SIZE (e.g. 50k or 44.6m)
\-\-max\-filesize SIZE              Do not download any videos larger than SIZE
                                 (e.g. 50k or 44.6m)
\-\-date DATE                      Download only videos uploaded in this date.
                                 The date can be \[dq]YYYYMMDD\[dq] or in the format
                                 \[dq](now|today)[+\-][0\-9](day|week|month|year)(
                                 s)?\[dq]
\-\-datebefore DATE                Download only videos uploaded on or before
                                 this date. The date formats accepted is the
                                 same as \-\-date
\-\-dateafter DATE                 Download only videos uploaded on or after
                                 this date. The date formats accepted is the
                                 same as \-\-date
\-\-match\-filter FILTER            Generic video filter. Any field (see
                                 \[dq]OUTPUT TEMPLATE\[dq]) can be compared with a
                                 number or a string using the operators
                                 defined in \[dq]Filtering formats\[dq]. You can
                                 also simply specify a field to match if the
                                 field is present and \[dq]!field\[dq] to check if
                                 the field is not present. In addition,
                                 Python style regular expression matching
                                 can be done using \[dq]\[ti]=\[dq], and multiple
                                 filters can be checked with \[dq]&\[dq]. Use a \[dq]\[rs]\[dq]
                                 to escape \[dq]&\[dq] or quotes if needed. Eg:
                                 \-\-match\-filter \[dq]!is_live & like_count>?100
                                 & description\[ti]=\[aq](?i)\[rs]bcats \[rs]& dogs\[rs]b\[aq]\[dq]
                                 matches only videos that are not live, has
                                 a like count more than 100 (or the like
                                 field is not available), and also has a
                                 description that contains the phrase \[dq]cats
                                 & dogs\[dq] (ignoring case)
\-\-no\-match\-filter                Do not use generic video filter (default)
\-\-no\-playlist                    Download only the video, if the URL refers
                                 to a video and a playlist
\-\-yes\-playlist                   Download the playlist, if the URL refers to
                                 a video and a playlist
\-\-age\-limit YEARS                Download only videos suitable for the given
                                 age
\-\-download\-archive FILE          Download only videos not listed in the
                                 archive file. Record the IDs of all
                                 downloaded videos in it
\-\-break\-on\-existing              Stop the download process when encountering
                                 a file that is in the archive
\-\-break\-on\-reject                Stop the download process when encountering
                                 a file that has been filtered out
\-\-skip\-playlist\-after\-errors N   Number of allowed failures until the rest
                                 of the playlist is skipped
\-\-no\-download\-archive            Do not use archive file (default)
\f[R]
.fi
.SS Download Options:
.IP
.nf
\f[C]
\-N, \-\-concurrent\-fragments N     Number of fragments of a dash/hlsnative
                                 video that should be download concurrently
                                 (default is 1)
\-r, \-\-limit\-rate RATE            Maximum download rate in bytes per second
                                 (e.g. 50K or 4.2M)
\-\-throttled\-rate RATE            Minimum download rate in bytes per second
                                 below which throttling is assumed and the
                                 video data is re\-extracted (e.g. 100K)
\-R, \-\-retries RETRIES            Number of retries (default is 10), or
                                 \[dq]infinite\[dq]
\-\-fragment\-retries RETRIES       Number of retries for a fragment (default
                                 is 10), or \[dq]infinite\[dq] (DASH, hlsnative and
                                 ISM)
\-\-skip\-unavailable\-fragments     Skip unavailable fragments for DASH,
                                 hlsnative and ISM (default) (Alias: \-\-no\-
                                 abort\-on\-unavailable\-fragment)
\-\-abort\-on\-unavailable\-fragment  Abort downloading if a fragment is
                                 unavailable (Alias: \-\-no\-skip\-unavailable\-
                                 fragments)
\-\-keep\-fragments                 Keep downloaded fragments on disk after
                                 downloading is finished
\-\-no\-keep\-fragments              Delete downloaded fragments after
                                 downloading is finished (default)
\-\-buffer\-size SIZE               Size of download buffer (e.g. 1024 or 16K)
                                 (default is 1024)
\-\-resize\-buffer                  The buffer size is automatically resized
                                 from an initial value of \-\-buffer\-size
                                 (default)
\-\-no\-resize\-buffer               Do not automatically adjust the buffer size
\-\-http\-chunk\-size SIZE           Size of a chunk for chunk\-based HTTP
                                 downloading (e.g. 10485760 or 10M) (default
                                 is disabled). May be useful for bypassing
                                 bandwidth throttling imposed by a webserver
                                 (experimental)
\-\-playlist\-reverse               Download playlist videos in reverse order
\-\-no\-playlist\-reverse            Download playlist videos in default order
                                 (default)
\-\-playlist\-random                Download playlist videos in random order
\-\-xattr\-set\-filesize             Set file xattribute ytdl.filesize with
                                 expected file size
\-\-hls\-use\-mpegts                 Use the mpegts container for HLS videos;
                                 allowing some players to play the video
                                 while downloading, and reducing the chance
                                 of file corruption if download is
                                 interrupted. This is enabled by default for
                                 live streams
\-\-no\-hls\-use\-mpegts              Do not use the mpegts container for HLS
                                 videos. This is default when not
                                 downloading live streams
\-\-downloader [PROTO:]NAME        Name or path of the external downloader to
                                 use (optionally) prefixed by the protocols
                                 (http, ftp, m3u8, dash, rstp, rtmp, mms) to
                                 use it for. Currently supports native,
                                 aria2c, avconv, axel, curl, ffmpeg, httpie,
                                 wget (Recommended: aria2c). You can use
                                 this option multiple times to set different
                                 downloaders for different protocols. For
                                 example, \-\-downloader aria2c \-\-downloader
                                 \[dq]dash,m3u8:native\[dq] will use aria2c for
                                 http/ftp downloads, and the native
                                 downloader for dash/m3u8 downloads (Alias:
                                 \-\-external\-downloader)
\-\-downloader\-args NAME:ARGS      Give these arguments to the external
                                 downloader. Specify the downloader name and
                                 the arguments separated by a colon \[dq]:\[dq]. For
                                 ffmpeg, arguments can be passed to
                                 different positions using the same syntax
                                 as \-\-postprocessor\-args. You can use this
                                 option multiple times to give different
                                 arguments to different downloaders (Alias:
                                 \-\-external\-downloader\-args)
\f[R]
.fi
.SS Filesystem Options:
.IP
.nf
\f[C]
\-a, \-\-batch\-file FILE            File containing URLs to download (\[aq]\-\[aq] for
                                 stdin), one URL per line. Lines starting
                                 with \[aq]#\[aq], \[aq];\[aq] or \[aq]]\[aq] are considered as
                                 comments and ignored
\-\-no\-batch\-file                  Do not read URLs from batch file (default)
\-P, \-\-paths [TYPES:]PATH         The paths where the files should be
                                 downloaded. Specify the type of file and
                                 the path separated by a colon \[dq]:\[dq]. All the
                                 same types as \-\-output are supported.
                                 Additionally, you can also provide \[dq]home\[dq]
                                 (default) and \[dq]temp\[dq] paths. All
                                 intermediary files are first downloaded to
                                 the temp path and then the final files are
                                 moved over to the home path after download
                                 is finished. This option is ignored if
                                 \-\-output is an absolute path
\-o, \-\-output [TYPES:]TEMPLATE    Output filename template; see \[dq]OUTPUT
                                 TEMPLATE\[dq] for details
\-\-output\-na\-placeholder TEXT     Placeholder value for unavailable meta
                                 fields in output filename template
                                 (default: \[dq]NA\[dq])
\-\-restrict\-filenames             Restrict filenames to only ASCII
                                 characters, and avoid \[dq]&\[dq] and spaces in
                                 filenames
\-\-no\-restrict\-filenames          Allow Unicode characters, \[dq]&\[dq] and spaces in
                                 filenames (default)
\-\-windows\-filenames              Force filenames to be windows compatible
\-\-no\-windows\-filenames           Make filenames windows compatible only if
                                 using windows (default)
\-\-trim\-filenames LENGTH          Limit the filename length (excluding
                                 extension) to the specified number of
                                 characters
\-w, \-\-no\-overwrites              Do not overwrite any files
\-\-force\-overwrites               Overwrite all video and metadata files.
                                 This option includes \-\-no\-continue
\-\-no\-force\-overwrites            Do not overwrite the video, but overwrite
                                 related files (default)
\-c, \-\-continue                   Resume partially downloaded files/fragments
                                 (default)
\-\-no\-continue                    Do not resume partially downloaded
                                 fragments. If the file is not fragmented,
                                 restart download of the entire file
\-\-part                           Use .part files instead of writing directly
                                 into output file (default)
\-\-no\-part                        Do not use .part files \- write directly
                                 into output file
\-\-mtime                          Use the Last\-modified header to set the
                                 file modification time (default)
\-\-no\-mtime                       Do not use the Last\-modified header to set
                                 the file modification time
\-\-write\-description              Write video description to a .description
                                 file
\-\-no\-write\-description           Do not write video description (default)
\-\-write\-info\-json                Write video metadata to a .info.json file
                                 (this may contain personal information)
\-\-no\-write\-info\-json             Do not write video metadata (default)
\-\-write\-playlist\-metafiles       Write playlist metadata in addition to the
                                 video metadata when using \-\-write\-info\-
                                 json, \-\-write\-description etc. (default)
\-\-no\-write\-playlist\-metafiles    Do not write playlist metadata when using
                                 \-\-write\-info\-json, \-\-write\-description etc.
\-\-clean\-infojson                 Remove some private fields such as
                                 filenames from the infojson. Note that it
                                 could still contain some personal
                                 information (default)
\-\-no\-clean\-infojson              Write all fields to the infojson
\-\-write\-comments                 Retrieve video comments to be placed in the
                                 infojson. The comments are fetched even
                                 without this option if the extraction is
                                 known to be quick (Alias: \-\-get\-comments)
\-\-no\-write\-comments              Do not retrieve video comments unless the
                                 extraction is known to be quick (Alias:
                                 \-\-no\-get\-comments)
\-\-load\-info\-json FILE            JSON file containing the video information
                                 (created with the \[dq]\-\-write\-info\-json\[dq]
                                 option)
\-\-cookies FILE                   File to read cookies from and dump cookie
                                 jar in
\-\-no\-cookies                     Do not read/dump cookies from/to file
                                 (default)
\-\-cookies\-from\-browser BROWSER[:PROFILE]
                                 Load cookies from a user profile of the
                                 given web browser. Currently supported
                                 browsers are: brave, chrome, chromium,
                                 edge, firefox, opera, safari, vivaldi. You
                                 can specify the user profile name or
                                 directory using \[dq]BROWSER:PROFILE_NAME\[dq] or
                                 \[dq]BROWSER:PROFILE_PATH\[dq]. If no profile is
                                 given, the most recently accessed one is
                                 used
\-\-no\-cookies\-from\-browser        Do not load cookies from browser (default)
\-\-cache\-dir DIR                  Location in the filesystem where youtube\-dl
                                 can store some downloaded information (such
                                 as client ids and signatures) permanently.
                                 By default $XDG_CACHE_HOME/yt\-dlp or
                                 \[ti]/.cache/yt\-dlp
\-\-no\-cache\-dir                   Disable filesystem caching
\-\-rm\-cache\-dir                   Delete all filesystem cache files
\f[R]
.fi
.SS Thumbnail Options:
.IP
.nf
\f[C]
\-\-write\-thumbnail                Write thumbnail image to disk
\-\-no\-write\-thumbnail             Do not write thumbnail image to disk
                                 (default)
\-\-write\-all\-thumbnails           Write all thumbnail image formats to disk
\-\-list\-thumbnails                List available thumbnails of each video.
                                 Simulate unless \-\-no\-simulate is used
\f[R]
.fi
.SS Internet Shortcut Options:
.IP
.nf
\f[C]
\-\-write\-link                     Write an internet shortcut file, depending
                                 on the current platform (.url, .webloc or
                                 .desktop). The URL may be cached by the OS
\-\-write\-url\-link                 Write a .url Windows internet shortcut. The
                                 OS caches the URL based on the file path
\-\-write\-webloc\-link              Write a .webloc macOS internet shortcut
\-\-write\-desktop\-link             Write a .desktop Linux internet shortcut
\f[R]
.fi
.SS Verbosity and Simulation Options:
.IP
.nf
\f[C]
\-q, \-\-quiet                      Activate quiet mode. If used with
                                 \-\-verbose, print the log to stderr
\-\-no\-warnings                    Ignore warnings
\-s, \-\-simulate                   Do not download the video and do not write
                                 anything to disk
\-\-no\-simulate                    Download the video even if printing/listing
                                 options are used
\-\-ignore\-no\-formats\-error        Ignore \[dq]No video formats\[dq] error. Usefull
                                 for extracting metadata even if the videos
                                 are not actually available for download
                                 (experimental)
\-\-no\-ignore\-no\-formats\-error     Throw error when no downloadable video
                                 formats are found (default)
\-\-skip\-download                  Do not download the video but write all
                                 related files (Alias: \-\-no\-download)
\-O, \-\-print TEMPLATE             Quiet, but print the given fields for each
                                 video. Simulate unless \-\-no\-simulate is
                                 used. Either a field name or same syntax as
                                 the output template can be used
\-j, \-\-dump\-json                  Quiet, but print JSON information for each
                                 video. Simulate unless \-\-no\-simulate is
                                 used. See \[dq]OUTPUT TEMPLATE\[dq] for a
                                 description of available keys
\-J, \-\-dump\-single\-json           Quiet, but print JSON information for each
                                 url or infojson passed. Simulate unless
                                 \-\-no\-simulate is used. If the URL refers to
                                 a playlist, the whole playlist information
                                 is dumped in a single line
\-\-force\-write\-archive            Force download archive entries to be
                                 written as far as no errors occur, even if
                                 \-s or another simulation option is used
                                 (Alias: \-\-force\-download\-archive)
\-\-newline                        Output progress bar as new lines
\-\-no\-progress                    Do not print progress bar
\-\-progress                       Show progress bar, even if in quiet mode
\-\-console\-title                  Display progress in console titlebar
\-\-progress\-template [TYPES:]TEMPLATE
                                 Template for progress outputs, optionally
                                 prefixed with one of \[dq]download:\[dq] (default),
                                 \[dq]download\-title:\[dq] (the console title),
                                 \[dq]postprocess:\[dq],  or \[dq]postprocess\-title:\[dq].
                                 The video\[aq]s fields are accessible under the
                                 \[dq]info\[dq] key and the progress attributes are
                                 accessible under \[dq]progress\[dq] key. Eg:
                                 \-\-console\-title \-\-progress\-template
                                 \[dq]download\-
                                 title:%(info.id)s\-%(progress.eta)s\[dq]
\-v, \-\-verbose                    Print various debugging information
\-\-dump\-pages                     Print downloaded pages encoded using base64
                                 to debug problems (very verbose)
\-\-write\-pages                    Write downloaded intermediary pages to
                                 files in the current directory to debug
                                 problems
\-\-print\-traffic                  Display sent and read HTTP traffic
\f[R]
.fi
.SS Workarounds:
.IP
.nf
\f[C]
\-\-encoding ENCODING              Force the specified encoding (experimental)
\-\-no\-check\-certificates          Suppress HTTPS certificate validation
\-\-prefer\-insecure                Use an unencrypted connection to retrieve
                                 information about the video (Currently
                                 supported only for YouTube)
\-\-user\-agent UA                  Specify a custom user agent
\-\-referer URL                    Specify a custom referer, use if the video
                                 access is restricted to one domain
\-\-add\-header FIELD:VALUE         Specify a custom HTTP header and its value,
                                 separated by a colon \[dq]:\[dq]. You can use this
                                 option multiple times
\-\-bidi\-workaround                Work around terminals that lack
                                 bidirectional text support. Requires bidiv
                                 or fribidi executable in PATH
\-\-sleep\-requests SECONDS         Number of seconds to sleep between requests
                                 during data extraction
\-\-sleep\-interval SECONDS         Number of seconds to sleep before each
                                 download. This is the minimum time to sleep
                                 when used along with \-\-max\-sleep\-interval
                                 (Alias: \-\-min\-sleep\-interval)
\-\-max\-sleep\-interval SECONDS     Maximum number of seconds to sleep. Can
                                 only be used along with \-\-min\-sleep\-
                                 interval
\-\-sleep\-subtitles SECONDS        Number of seconds to sleep before each
                                 subtitle download
\f[R]
.fi
.SS Video Format Options:
.IP
.nf
\f[C]
\-f, \-\-format FORMAT              Video format code, see \[dq]FORMAT SELECTION\[dq]
                                 for more details
\-S, \-\-format\-sort SORTORDER      Sort the formats by the fields given, see
                                 \[dq]Sorting Formats\[dq] for more details
\-\-format\-sort\-force              Force user specified sort order to have
                                 precedence over all fields, see \[dq]Sorting
                                 Formats\[dq] for more details
\-\-no\-format\-sort\-force           Some fields have precedence over the user
                                 specified sort order (default), see
                                 \[dq]Sorting Formats\[dq] for more details
\-\-video\-multistreams             Allow multiple video streams to be merged
                                 into a single file
\-\-no\-video\-multistreams          Only one video stream is downloaded for
                                 each output file (default)
\-\-audio\-multistreams             Allow multiple audio streams to be merged
                                 into a single file
\-\-no\-audio\-multistreams          Only one audio stream is downloaded for
                                 each output file (default)
\-\-prefer\-free\-formats            Prefer video formats with free containers
                                 over non\-free ones of same quality. Use
                                 with \[dq]\-S ext\[dq] to strictly prefer free
                                 containers irrespective of quality
\-\-no\-prefer\-free\-formats         Don\[aq]t give any special preference to free
                                 containers (default)
\-\-check\-formats                  Check that the formats selected are
                                 actually downloadable
\-\-no\-check\-formats               Do not check that the formats selected are
                                 actually downloadable
\-F, \-\-list\-formats               List available formats of each video.
                                 Simulate unless \-\-no\-simulate is used
\-\-merge\-output\-format FORMAT     If a merge is required (e.g.
                                 bestvideo+bestaudio), output to given
                                 container format. One of mkv, mp4, ogg,
                                 webm, flv. Ignored if no merge is required
\f[R]
.fi
.SS Subtitle Options:
.IP
.nf
\f[C]
\-\-write\-subs                     Write subtitle file
\-\-no\-write\-subs                  Do not write subtitle file (default)
\-\-write\-auto\-subs                Write automatically generated subtitle file
                                 (Alias: \-\-write\-automatic\-subs)
\-\-no\-write\-auto\-subs             Do not write auto\-generated subtitles
                                 (default) (Alias: \-\-no\-write\-automatic\-
                                 subs)
\-\-list\-subs                      List available subtitles of each video.
                                 Simulate unless \-\-no\-simulate is used
\-\-sub\-format FORMAT              Subtitle format, accepts formats
                                 preference, for example: \[dq]srt\[dq] or
                                 \[dq]ass/srt/best\[dq]
\-\-sub\-langs LANGS                Languages of the subtitles to download (can
                                 be regex) or \[dq]all\[dq] separated by commas.
                                 (Eg: \-\-sub\-langs en.*,ja) You can prefix
                                 the language code with a \[dq]\-\[dq] to exempt it
                                 from the requested languages. (Eg: \-\-sub\-
                                 langs all,\-live_chat) Use \-\-list\-subs for a
                                 list of available language tags
\f[R]
.fi
.SS Authentication Options:
.IP
.nf
\f[C]
\-u, \-\-username USERNAME          Login with this account ID
\-p, \-\-password PASSWORD          Account password. If this option is left
                                 out, yt\-dlp will ask interactively
\-2, \-\-twofactor TWOFACTOR        Two\-factor authentication code
\-n, \-\-netrc                      Use .netrc authentication data
\-\-netrc\-location PATH            Location of .netrc authentication data;
                                 either the path or its containing
                                 directory. Defaults to \[ti]/.netrc
\-\-video\-password PASSWORD        Video password (vimeo, youku)
\-\-ap\-mso MSO                     Adobe Pass multiple\-system operator (TV
                                 provider) identifier, use \-\-ap\-list\-mso for
                                 a list of available MSOs
\-\-ap\-username USERNAME           Multiple\-system operator account login
\-\-ap\-password PASSWORD           Multiple\-system operator account password.
                                 If this option is left out, yt\-dlp will ask
                                 interactively
\-\-ap\-list\-mso                    List all supported multiple\-system
                                 operators
\f[R]
.fi
.SS Post\-Processing Options:
.IP
.nf
\f[C]
\-x, \-\-extract\-audio              Convert video files to audio\-only files
                                 (requires ffmpeg and ffprobe)
\-\-audio\-format FORMAT            Specify audio format to convert the audio
                                 to when \-x is used. Currently supported
                                 formats are: best (default) or one of
                                 best|aac|flac|mp3|m4a|opus|vorbis|wav
\-\-audio\-quality QUALITY          Specify ffmpeg audio quality, insert a
                                 value between 0 (better) and 9 (worse) for
                                 VBR or a specific bitrate like 128K
                                 (default 5)
\-\-remux\-video FORMAT             Remux the video into another container if
                                 necessary (currently supported: mp4|mkv|flv
                                 |webm|mov|avi|mp3|mka|m4a|ogg|opus). If
                                 target container does not support the
                                 video/audio codec, remuxing will fail. You
                                 can specify multiple rules; Eg.
                                 \[dq]aac>m4a/mov>mp4/mkv\[dq] will remux aac to
                                 m4a, mov to mp4 and anything else to mkv.
\-\-recode\-video FORMAT            Re\-encode the video into another format if
                                 re\-encoding is necessary. The syntax and
                                 supported formats are the same as \-\-remux\-
                                 video
\-\-postprocessor\-args NAME:ARGS   Give these arguments to the postprocessors.
                                 Specify the postprocessor/executable name
                                 and the arguments separated by a colon \[dq]:\[dq]
                                 to give the argument to the specified
                                 postprocessor/executable. Supported PP are:
                                 Merger, ModifyChapters, SplitChapters,
                                 ExtractAudio, VideoRemuxer, VideoConvertor,
                                 Metadata, EmbedSubtitle, EmbedThumbnail,
                                 SubtitlesConvertor, ThumbnailsConvertor,
                                 FixupStretched, FixupM4a, FixupM3u8,
                                 FixupTimestamp and FixupDuration. The
                                 supported executables are: AtomicParsley,
                                 FFmpeg and FFprobe. You can also specify
                                 \[dq]PP+EXE:ARGS\[dq] to give the arguments to the
                                 specified executable only when being used
                                 by the specified postprocessor.
                                 Additionally, for ffmpeg/ffprobe, \[dq]_i\[dq]/\[dq]_o\[dq]
                                 can be appended to the prefix optionally
                                 followed by a number to pass the argument
                                 before the specified input/output file. Eg:
                                 \-\-ppa \[dq]Merger+ffmpeg_i1:\-v quiet\[dq]. You can
                                 use this option multiple times to give
                                 different arguments to different
                                 postprocessors. (Alias: \-\-ppa)
\-k, \-\-keep\-video                 Keep the intermediate video file on disk
                                 after post\-processing
\-\-no\-keep\-video                  Delete the intermediate video file after
                                 post\-processing (default)
\-\-post\-overwrites                Overwrite post\-processed files (default)
\-\-no\-post\-overwrites             Do not overwrite post\-processed files
\-\-embed\-subs                     Embed subtitles in the video (only for mp4,
                                 webm and mkv videos)
\-\-no\-embed\-subs                  Do not embed subtitles (default)
\-\-embed\-thumbnail                Embed thumbnail in the video as cover art
\-\-no\-embed\-thumbnail             Do not embed thumbnail (default)
\-\-embed\-metadata                 Embed metadata to the video file. Also adds
                                 chapters to file unless \-\-no\-add\-chapters
                                 is used (Alias: \-\-add\-metadata)
\-\-no\-embed\-metadata              Do not add metadata to file (default)
                                 (Alias: \-\-no\-add\-metadata)
\-\-embed\-chapters                 Add chapter markers to the video file
                                 (Alias: \-\-add\-chapters)
\-\-no\-embed\-chapters              Do not add chapter markers (default)
                                 (Alias: \-\-no\-add\-chapters)
\-\-parse\-metadata FROM:TO         Parse additional metadata like title/artist
                                 from other fields; see \[dq]MODIFYING METADATA\[dq]
                                 for details
\-\-replace\-in\-metadata FIELDS REGEX REPLACE
                                 Replace text in a metadata field using the
                                 given regex. This option can be used
                                 multiple times
\-\-xattrs                         Write metadata to the video file\[aq]s xattrs
                                 (using dublin core and xdg standards)
\-\-fixup POLICY                   Automatically correct known faults of the
                                 file. One of never (do nothing), warn (only
                                 emit a warning), detect_or_warn (the
                                 default; fix file if we can, warn
                                 otherwise), force (try fixing even if file
                                 already exists
\-\-ffmpeg\-location PATH           Location of the ffmpeg binary; either the
                                 path to the binary or its containing
                                 directory
\-\-exec CMD                       Execute a command on the file after
                                 downloading and post\-processing. Same
                                 syntax as the output template can be used
                                 to pass any field as arguments to the
                                 command. An additional field \[dq]filepath\[dq]
                                 that contains the final path of the
                                 downloaded file is also available. If no
                                 fields are passed, %(filepath)q is appended
                                 to the end of the command. This option can
                                 be used multiple times
\-\-no\-exec                        Remove any previously defined \-\-exec
\-\-exec\-before\-download CMD       Execute a command before the actual
                                 download. The syntax is the same as \-\-exec
                                 but \[dq]filepath\[dq] is not available. This
                                 option can be used multiple times
\-\-no\-exec\-before\-download        Remove any previously defined \-\-exec\-
                                 before\-download
\-\-convert\-subs FORMAT            Convert the subtitles to another format
                                 (currently supported: srt|vtt|ass|lrc)
                                 (Alias: \-\-convert\-subtitles)
\-\-convert\-thumbnails FORMAT      Convert the thumbnails to another format
                                 (currently supported: jpg|png)
\-\-split\-chapters                 Split video into multiple files based on
                                 internal chapters. The \[dq]chapter:\[dq] prefix
                                 can be used with \[dq]\-\-paths\[dq] and \[dq]\-\-output\[dq]
                                 to set the output filename for the split
                                 files. See \[dq]OUTPUT TEMPLATE\[dq] for details
\-\-no\-split\-chapters              Do not split video based on chapters
                                 (default)
\-\-remove\-chapters REGEX          Remove chapters whose title matches the
                                 given regular expression. Time ranges
                                 prefixed by a \[dq]*\[dq] can also be used in place
                                 of chapters to remove the specified range.
                                 Eg: \-\-remove\-chapters \[dq]*10:15\-15:00\[dq]
                                 \-\-remove\-chapters \[dq]intro\[dq]. This option can
                                 be used multiple times
\-\-no\-remove\-chapters             Do not remove any chapters from the file
                                 (default)
\-\-force\-keyframes\-at\-cuts        Force keyframes around the chapters before
                                 removing/splitting them. Requires a
                                 reencode and thus is very slow, but the
                                 resulting video may have fewer artifacts
                                 around the cuts
\-\-no\-force\-keyframes\-at\-cuts     Do not force keyframes around the chapters
                                 when cutting/splitting (default)
\-\-use\-postprocessor NAME[:ARGS]  The (case sensitive) name of plugin
                                 postprocessors to be enabled, and
                                 (optionally) arguments to be passed to it,
                                 seperated by a colon \[dq]:\[dq]. ARGS are a
                                 semicolon \[dq];\[dq] delimited list of NAME=VALUE.
                                 The \[dq]when\[dq] argument determines when the
                                 postprocessor is invoked. It can be one of
                                 \[dq]pre_process\[dq] (after extraction),
                                 \[dq]before_dl\[dq] (before video download),
                                 \[dq]post_process\[dq] (after video download;
                                 default) or \[dq]after_move\[dq] (after moving file
                                 to their final locations). This option can
                                 be used multiple times to add different
                                 postprocessors
\f[R]
.fi
.SS SponsorBlock Options:
.IP
.nf
\f[C]
Make chapter entries for, or remove various segments (sponsor,
introductions, etc.) from downloaded YouTube videos using the
SponsorBlock API (https://sponsor.ajay.app)

\-\-sponsorblock\-mark CATS         SponsorBlock categories to create chapters
                                 for, separated by commas. Available
                                 categories are all, sponsor, intro, outro,
                                 selfpromo, interaction, preview,
                                 music_offtopic. You can prefix the category
                                 with a \[dq]\-\[dq] to exempt it. See https://wiki.s
                                 ponsor.ajay.app/index.php/Segment_Categorie
                                 s for description of the categories. Eg:
                                 \-\-sponsorblock\-mark all,\-preview
\-\-sponsorblock\-remove CATS       SponsorBlock categories to be removed from
                                 the video file, separated by commas. If a
                                 category is present in both mark and
                                 remove, remove takes precedence. The syntax
                                 and available categories are the same as
                                 for \-\-sponsorblock\-mark
\-\-sponsorblock\-chapter\-title TEMPLATE
                                 The title template for SponsorBlock
                                 chapters created by \-\-sponsorblock\-mark.
                                 The same syntax as the output template is
                                 used, but the only available fields are
                                 start_time, end_time, category, categories,
                                 name, category_names. Defaults to
                                 \[dq][SponsorBlock]: %(category_names)l\[dq]
\-\-no\-sponsorblock                Disable both \-\-sponsorblock\-mark and
                                 \-\-sponsorblock\-remove
\-\-sponsorblock\-api URL           SponsorBlock API location, defaults to
                                 https://sponsor.ajay.app
\f[R]
.fi
.SS Extractor Options:
.IP
.nf
\f[C]
\-\-extractor\-retries RETRIES      Number of retries for known extractor
                                 errors (default is 3), or \[dq]infinite\[dq]
\-\-allow\-dynamic\-mpd              Process dynamic DASH manifests (default)
                                 (Alias: \-\-no\-ignore\-dynamic\-mpd)
\-\-ignore\-dynamic\-mpd             Do not process dynamic DASH manifests
                                 (Alias: \-\-no\-allow\-dynamic\-mpd)
\-\-hls\-split\-discontinuity        Split HLS playlists to different formats at
                                 discontinuities such as ad breaks
\-\-no\-hls\-split\-discontinuity     Do not split HLS playlists to different
                                 formats at discontinuities such as ad
                                 breaks (default)
\-\-extractor\-args KEY:ARGS        Pass these arguments to the extractor. See
                                 \[dq]EXTRACTOR ARGUMENTS\[dq] for details. You can
                                 use this option multiple times to give
                                 arguments for different extractors
\f[R]
.fi
.SH CONFIGURATION
.PP
You can configure yt\-dlp by placing any supported command line option
to a configuration file.
The configuration is loaded from the following locations:
.IP "1." 3
\f[B]Main Configuration\f[R]: The file given by
\f[C]\-\-config\-location\f[R]
.IP "2." 3
\f[B]Portable Configuration\f[R]: \f[C]yt\-dlp.conf\f[R] in the same
directory as the bundled binary.
If you are running from source\-code
(\f[C]<root dir>/yt_dlp/__main__.py\f[R]), the root directory is used
instead.
.IP "3." 3
\f[B]Home Configuration\f[R]: \f[C]yt\-dlp.conf\f[R] in the home path
given by \f[C]\-P \[dq]home:<path>\[dq]\f[R], or in the current
directory if no such path is given
.IP "4." 3
\f[B]User Configuration\f[R]:
.RS 4
.IP \[bu] 2
\f[C]%XDG_CONFIG_HOME%/yt\-dlp/config\f[R] (recommended on Linux/macOS)
.IP \[bu] 2
\f[C]%XDG_CONFIG_HOME%/yt\-dlp.conf\f[R]
.IP \[bu] 2
\f[C]%APPDATA%/yt\-dlp/config\f[R] (recommended on Windows)
.IP \[bu] 2
\f[C]%APPDATA%/yt\-dlp/config.txt\f[R]
.IP \[bu] 2
\f[C]\[ti]/yt\-dlp.conf\f[R]
.IP \[bu] 2
\f[C]\[ti]/yt\-dlp.conf.txt\f[R]
\f[C]%XDG_CONFIG_HOME%\f[R] defaults to \f[C]\[ti]/.config\f[R] if
undefined.
On windows, \f[C]\[ti]\f[R] points to %HOME% if present,
\f[C]%USERPROFILE%\f[R] (generally
\f[C]C:\[rs]Users\[rs]<user name>\f[R]) or
\f[C]%HOMEDRIVE%%HOMEPATH%\f[R].
.RE
.IP "5." 3
\f[B]System Configuration\f[R]: \f[C]/etc/yt\-dlp.conf\f[R]
.PP
For example, with the following configuration file yt\-dlp will always
extract the audio, not copy the mtime, use a proxy and save all videos
under \f[C]YouTube\f[R] directory in your home directory:
.IP
.nf
\f[C]
# Lines starting with # are comments

# Always extract audio
\-x

# Do not copy the mtime
\-\-no\-mtime

# Use this proxy
\-\-proxy 127.0.0.1:3128

# Save all videos under YouTube directory in your home directory
\-o \[ti]/YouTube/%(title)s.%(ext)s
\f[R]
.fi
.PP
Note that options in configuration file are just the same options aka
switches used in regular command line calls; thus there \f[B]must be no
whitespace\f[R] after \f[C]\-\f[R] or \f[C]\-\-\f[R], e.g.
\f[C]\-o\f[R] or \f[C]\-\-proxy\f[R] but not \f[C]\- o\f[R] or
\f[C]\-\- proxy\f[R].
.PP
You can use \f[C]\-\-ignore\-config\f[R] if you want to disable all
configuration files for a particular yt\-dlp run.
If \f[C]\-\-ignore\-config\f[R] is found inside any configuration file,
no further configuration will be loaded.
For example, having the option in the portable configuration file
prevents loading of user and system configurations.
Additionally, (for backward compatibility) if
\f[C]\-\-ignore\-config\f[R] is found inside the system configuration
file, the user configuration is not loaded.
.SS Authentication with \f[C].netrc\f[R] file
.PP
You may also want to configure automatic credentials storage for
extractors that support authentication (by providing login and password
with \f[C]\-\-username\f[R] and \f[C]\-\-password\f[R]) in order not to
pass credentials as command line arguments on every yt\-dlp execution
and prevent tracking plain text passwords in the shell command history.
You can achieve this using a \f[C].netrc\f[R]
file (https://stackoverflow.com/tags/.netrc/info) on a per extractor
basis.
For that you will need to create a \f[C].netrc\f[R] file in
\f[C]\-\-netrc\-location\f[R] and restrict permissions to read/write by
only you:
.IP
.nf
\f[C]
touch $HOME/.netrc
chmod a\-rwx,u+rw $HOME/.netrc
\f[R]
.fi
.PP
After that you can add credentials for an extractor in the following
format, where \f[I]extractor\f[R] is the name of the extractor in
lowercase:
.IP
.nf
\f[C]
machine <extractor> login <username> password <password>
\f[R]
.fi
.PP
For example:
.IP
.nf
\f[C]
machine youtube login myaccount\[at]gmail.com password my_youtube_password
machine twitch login my_twitch_account_name password my_twitch_password
\f[R]
.fi
.PP
To activate authentication with the \f[C].netrc\f[R] file you should
pass \f[C]\-\-netrc\f[R] to yt\-dlp or place it in the configuration
file.
.PP
The default location of the .netrc file is \f[C]$HOME\f[R]
(\f[C]\[ti]\f[R]) in UNIX.
On Windows, it is \f[C]%HOME%\f[R] if present, \f[C]%USERPROFILE%\f[R]
(generally \f[C]C:\[rs]Users\[rs]<user name>\f[R]) or
\f[C]%HOMEDRIVE%%HOMEPATH%\f[R]
.SH OUTPUT TEMPLATE
.PP
The \f[C]\-o\f[R] option is used to indicate a template for the output
file names while \f[C]\-P\f[R] option is used to specify the path each
type of file should be saved to.
.PP
\f[B]tl;dr:\f[R] navigate me to examples.
.PP
The simplest usage of \f[C]\-o\f[R] is not to set any template arguments
when downloading a single file, like in
\f[C]yt\-dlp \-o funny_video.flv \[dq]https://some/video\[dq]\f[R]
(hard\-coding file extension like this is \f[I]not\f[R] recommended and
could break some post\-processing).
.PP
It may however also contain special sequences that will be replaced when
downloading each video.
The special sequences may be formatted according to python string
formatting
operations (https://docs.python.org/3/library/stdtypes.html#printf-style-string-formatting).
For example, \f[C]%(NAME)s\f[R] or \f[C]%(NAME)05d\f[R].
To clarify, that is a percent symbol followed by a name in parentheses,
followed by formatting operations.
.PP
The field names themselves (the part inside the parenthesis) can also
have some special formatting: 1.
\f[B]Object traversal\f[R]: The dictionaries and lists available in
metadata can be traversed by using a \f[C].\f[R] (dot) separator.
You can also do python slicing using \f[C]:\f[R].
Eg: \f[C]%(tags.0)s\f[R], \f[C]%(subtitles.en.\-1.ext)s\f[R],
\f[C]%(id.3:7:\-1)s\f[R], \f[C]%(formats.:.format_id)s\f[R].
\f[C]%()s\f[R] refers to the entire infodict.
Note that all the fields that become available using this method are not
listed below.
Use \f[C]\-j\f[R] to see such fields 1.
\f[B]Addition\f[R]: Addition and subtraction of numeric fields can be
done using \f[C]+\f[R] and \f[C]\-\f[R] respectively.
Eg: \f[C]%(playlist_index+10)03d\f[R],
\f[C]%(n_entries+1\-playlist_index)d\f[R] 1.
\f[B]Date/time Formatting\f[R]: Date/time fields can be formatted
according to strftime
formatting (https://docs.python.org/3/library/datetime.html#strftime-and-strptime-format-codes)
by specifying it separated from the field name using a \f[C]>\f[R].
Eg: \f[C]%(duration>%H\-%M\-%S)s\f[R],
\f[C]%(upload_date>%Y\-%m\-%d)s\f[R],
\f[C]%(epoch\-3600>%H\-%M\-%S)s\f[R] 1.
\f[B]Alternatives\f[R]: Alternate fields can be specified seperated with
a \f[C],\f[R].
Eg: \f[C]%(release_date>%Y,upload_date>%Y|Unknown)s\f[R] 1.
\f[B]Default\f[R]: A literal default value can be specified for when the
field is empty using a \f[C]|\f[R] seperator.
This overrides \f[C]\-\-output\-na\-template\f[R].
Eg: \f[C]%(uploader|Unknown)s\f[R] 1.
\f[B]More Conversions\f[R]: In addition to the normal format types
\f[C]diouxXeEfFgGcrs\f[R], \f[C]B\f[R], \f[C]j\f[R], \f[C]l\f[R],
\f[C]q\f[R] can be used for converting to \f[B]B\f[R]ytes,
\f[B]j\f[R]son, a comma seperated \f[B]l\f[R]ist (alternate form flag
\f[C]#\f[R] makes it new line \f[C]\[rs]n\f[R] seperated) and a string
\f[B]q\f[R]uoted for the terminal, respectively 1.
\f[B]Unicode normalization\f[R]: The format type \f[C]U\f[R] can be used
for NFC unicode
normalization (https://docs.python.org/3/library/unicodedata.html#unicodedata.normalize).
The alternate form flag (\f[C]#\f[R]) changes the normalization to NFD
and the conversion flag \f[C]+\f[R] can be used for NFKC/NFKD
compatibility equivalence normalization.
Eg: \f[C]%(title)+.100U\f[R] is NFKC
.PP
To summarize, the general syntax for a field is:
.IP
.nf
\f[C]
%(name[.keys][addition][>strf][,alternate][|default])[flags][width][.precision][length]type
\f[R]
.fi
.PP
Additionally, you can set different output templates for the various
metadata files separately from the general output template by specifying
the type of file followed by the template separated by a colon
\f[C]:\f[R].
The different file types supported are \f[C]subtitle\f[R],
\f[C]thumbnail\f[R], \f[C]description\f[R], \f[C]annotation\f[R]
(deprecated), \f[C]infojson\f[R], \f[C]pl_thumbnail\f[R],
\f[C]pl_description\f[R], \f[C]pl_infojson\f[R], \f[C]chapter\f[R].
For example,
\f[C]\-o \[aq]%(title)s.%(ext)s\[aq] \-o \[aq]thumbnail:%(title)s\[rs]%(title)s.%(ext)s\[aq]\f[R]
will put the thumbnails in a folder with the same name as the video.
If any of the templates (except default) is empty, that type of file
will not be written.
Eg: \f[C]\-\-write\-thumbnail \-o \[dq]thumbnail:\[dq]\f[R] will write
thumbnails only for playlists and not for video.
.PP
The available fields are:
.IP \[bu] 2
\f[C]id\f[R] (string): Video identifier
.IP \[bu] 2
\f[C]title\f[R] (string): Video title
.IP \[bu] 2
\f[C]url\f[R] (string): Video URL
.IP \[bu] 2
\f[C]ext\f[R] (string): Video filename extension
.IP \[bu] 2
\f[C]alt_title\f[R] (string): A secondary title of the video
.IP \[bu] 2
\f[C]description\f[R] (string): The description of the video
.IP \[bu] 2
\f[C]display_id\f[R] (string): An alternative identifier for the video
.IP \[bu] 2
\f[C]uploader\f[R] (string): Full name of the video uploader
.IP \[bu] 2
\f[C]license\f[R] (string): License name the video is licensed under
.IP \[bu] 2
\f[C]creator\f[R] (string): The creator of the video
.IP \[bu] 2
\f[C]timestamp\f[R] (numeric): UNIX timestamp of the moment the video
became available
.IP \[bu] 2
\f[C]upload_date\f[R] (string): Video upload date (YYYYMMDD)
.IP \[bu] 2
\f[C]release_date\f[R] (string): The date (YYYYMMDD) when the video was
released
.IP \[bu] 2
\f[C]release_timestamp\f[R] (numeric): UNIX timestamp of the moment the
video was released
.IP \[bu] 2
\f[C]uploader_id\f[R] (string): Nickname or id of the video uploader
.IP \[bu] 2
\f[C]channel\f[R] (string): Full name of the channel the video is
uploaded on
.IP \[bu] 2
\f[C]channel_id\f[R] (string): Id of the channel
.IP \[bu] 2
\f[C]location\f[R] (string): Physical location where the video was
filmed
.IP \[bu] 2
\f[C]duration\f[R] (numeric): Length of the video in seconds
.IP \[bu] 2
\f[C]duration_string\f[R] (string): Length of the video (HH:mm:ss)
.IP \[bu] 2
\f[C]view_count\f[R] (numeric): How many users have watched the video on
the platform
.IP \[bu] 2
\f[C]like_count\f[R] (numeric): Number of positive ratings of the video
.IP \[bu] 2
\f[C]dislike_count\f[R] (numeric): Number of negative ratings of the
video
.IP \[bu] 2
\f[C]repost_count\f[R] (numeric): Number of reposts of the video
.IP \[bu] 2
\f[C]average_rating\f[R] (numeric): Average rating give by users, the
scale used depends on the webpage
.IP \[bu] 2
\f[C]comment_count\f[R] (numeric): Number of comments on the video (For
some extractors, comments are only downloaded at the end, and so this
field cannot be used)
.IP \[bu] 2
\f[C]age_limit\f[R] (numeric): Age restriction for the video (years)
.IP \[bu] 2
\f[C]live_status\f[R] (string): One of \[aq]is_live\[aq],
\[aq]was_live\[aq], \[aq]is_upcoming\[aq], \[aq]not_live\[aq]
.IP \[bu] 2
\f[C]is_live\f[R] (boolean): Whether this video is a live stream or a
fixed\-length video
.IP \[bu] 2
\f[C]was_live\f[R] (boolean): Whether this video was originally a live
stream
.IP \[bu] 2
\f[C]playable_in_embed\f[R] (string): Whether this video is allowed to
play in embedded players on other sites
.IP \[bu] 2
\f[C]availability\f[R] (string): Whether the video is \[aq]private\[aq],
\[aq]premium_only\[aq], \[aq]subscriber_only\[aq], \[aq]needs_auth\[aq],
\[aq]unlisted\[aq] or \[aq]public\[aq]
.IP \[bu] 2
\f[C]start_time\f[R] (numeric): Time in seconds where the reproduction
should start, as specified in the URL
.IP \[bu] 2
\f[C]end_time\f[R] (numeric): Time in seconds where the reproduction
should end, as specified in the URL
.IP \[bu] 2
\f[C]format\f[R] (string): A human\-readable description of the format
.IP \[bu] 2
\f[C]format_id\f[R] (string): Format code specified by
\f[C]\-\-format\f[R]
.IP \[bu] 2
\f[C]format_note\f[R] (string): Additional info about the format
.IP \[bu] 2
\f[C]width\f[R] (numeric): Width of the video
.IP \[bu] 2
\f[C]height\f[R] (numeric): Height of the video
.IP \[bu] 2
\f[C]resolution\f[R] (string): Textual description of width and height
.IP \[bu] 2
\f[C]tbr\f[R] (numeric): Average bitrate of audio and video in KBit/s
.IP \[bu] 2
\f[C]abr\f[R] (numeric): Average audio bitrate in KBit/s
.IP \[bu] 2
\f[C]acodec\f[R] (string): Name of the audio codec in use
.IP \[bu] 2
\f[C]asr\f[R] (numeric): Audio sampling rate in Hertz
.IP \[bu] 2
\f[C]vbr\f[R] (numeric): Average video bitrate in KBit/s
.IP \[bu] 2
\f[C]fps\f[R] (numeric): Frame rate
.IP \[bu] 2
\f[C]dynamic_range\f[R] (string): The dynamic range of the video
.IP \[bu] 2
\f[C]vcodec\f[R] (string): Name of the video codec in use
.IP \[bu] 2
\f[C]container\f[R] (string): Name of the container format
.IP \[bu] 2
\f[C]filesize\f[R] (numeric): The number of bytes, if known in advance
.IP \[bu] 2
\f[C]filesize_approx\f[R] (numeric): An estimate for the number of bytes
.IP \[bu] 2
\f[C]protocol\f[R] (string): The protocol that will be used for the
actual download
.IP \[bu] 2
\f[C]extractor\f[R] (string): Name of the extractor
.IP \[bu] 2
\f[C]extractor_key\f[R] (string): Key name of the extractor
.IP \[bu] 2
\f[C]epoch\f[R] (numeric): Unix epoch when creating the file
.IP \[bu] 2
\f[C]autonumber\f[R] (numeric): Number that will be increased with each
download, starting at \f[C]\-\-autonumber\-start\f[R]
.IP \[bu] 2
\f[C]n_entries\f[R] (numeric): Total number of extracted items in the
playlist
.IP \[bu] 2
\f[C]playlist\f[R] (string): Name or id of the playlist that contains
the video
.IP \[bu] 2
\f[C]playlist_index\f[R] (numeric): Index of the video in the playlist
padded with leading zeros according the final index
.IP \[bu] 2
\f[C]playlist_autonumber\f[R] (numeric): Position of the video in the
playlist download queue padded with leading zeros according to the total
length of the playlist
.IP \[bu] 2
\f[C]playlist_id\f[R] (string): Playlist identifier
.IP \[bu] 2
\f[C]playlist_title\f[R] (string): Playlist title
.IP \[bu] 2
\f[C]playlist_uploader\f[R] (string): Full name of the playlist uploader
.IP \[bu] 2
\f[C]playlist_uploader_id\f[R] (string): Nickname or id of the playlist
uploader
.IP \[bu] 2
\f[C]webpage_url\f[R] (string): A URL to the video webpage which if
given to yt\-dlp should allow to get the same result again
.IP \[bu] 2
\f[C]original_url\f[R] (string): The URL given by the user (or same as
\f[C]webpage_url\f[R] for playlist entries)
.PP
Available for the video that belongs to some logical chapter or section:
.IP \[bu] 2
\f[C]chapter\f[R] (string): Name or title of the chapter the video
belongs to
.IP \[bu] 2
\f[C]chapter_number\f[R] (numeric): Number of the chapter the video
belongs to
.IP \[bu] 2
\f[C]chapter_id\f[R] (string): Id of the chapter the video belongs to
.PP
Available for the video that is an episode of some series or programme:
.IP \[bu] 2
\f[C]series\f[R] (string): Title of the series or programme the video
episode belongs to
.IP \[bu] 2
\f[C]season\f[R] (string): Title of the season the video episode belongs
to
.IP \[bu] 2
\f[C]season_number\f[R] (numeric): Number of the season the video
episode belongs to
.IP \[bu] 2
\f[C]season_id\f[R] (string): Id of the season the video episode belongs
to
.IP \[bu] 2
\f[C]episode\f[R] (string): Title of the video episode
.IP \[bu] 2
\f[C]episode_number\f[R] (numeric): Number of the video episode within a
season
.IP \[bu] 2
\f[C]episode_id\f[R] (string): Id of the video episode
.PP
Available for the media that is a track or a part of a music album:
.IP \[bu] 2
\f[C]track\f[R] (string): Title of the track
.IP \[bu] 2
\f[C]track_number\f[R] (numeric): Number of the track within an album or
a disc
.IP \[bu] 2
\f[C]track_id\f[R] (string): Id of the track
.IP \[bu] 2
\f[C]artist\f[R] (string): Artist(s) of the track
.IP \[bu] 2
\f[C]genre\f[R] (string): Genre(s) of the track
.IP \[bu] 2
\f[C]album\f[R] (string): Title of the album the track belongs to
.IP \[bu] 2
\f[C]album_type\f[R] (string): Type of the album
.IP \[bu] 2
\f[C]album_artist\f[R] (string): List of all artists appeared on the
album
.IP \[bu] 2
\f[C]disc_number\f[R] (numeric): Number of the disc or other physical
medium the track belongs to
.IP \[bu] 2
\f[C]release_year\f[R] (numeric): Year (YYYY) when the album was
released
.PP
Available for \f[C]chapter:\f[R] prefix when using
\f[C]\-\-split\-chapters\f[R] for videos with internal chapters:
.IP \[bu] 2
\f[C]section_title\f[R] (string): Title of the chapter
.IP \[bu] 2
\f[C]section_number\f[R] (numeric): Number of the chapter within the
file
.IP \[bu] 2
\f[C]section_start\f[R] (numeric): Start time of the chapter in seconds
.IP \[bu] 2
\f[C]section_end\f[R] (numeric): End time of the chapter in seconds
.PP
Available only when used in \f[C]\-\-print\f[R]:
.IP \[bu] 2
\f[C]urls\f[R] (string): The URLs of all requested formats, one in each
line
.IP \[bu] 2
\f[C]filename\f[R] (string): Name of the video file.
Note that the actual filename may be different due to post\-processing.
Use \f[C]\-\-exec echo\f[R] to get the name after all postprocessing is
complete
.PP
Available only in \f[C]\-\-sponsorblock\-chapter\-title\f[R]:
.IP \[bu] 2
\f[C]start_time\f[R] (numeric): Start time of the chapter in seconds
.IP \[bu] 2
\f[C]end_time\f[R] (numeric): End time of the chapter in seconds
.IP \[bu] 2
\f[C]categories\f[R] (list): The SponsorBlock categories the chapter
belongs to
.IP \[bu] 2
\f[C]category\f[R] (string): The smallest SponsorBlock category the
chapter belongs to
.IP \[bu] 2
\f[C]category_names\f[R] (list): Friendly names of the categories
.IP \[bu] 2
\f[C]name\f[R] (string): Friendly name of the smallest category
.PP
Each aforementioned sequence when referenced in an output template will
be replaced by the actual value corresponding to the sequence name.
For example for \f[C]\-o %(title)s\-%(id)s.%(ext)s\f[R] and an mp4 video
with title \f[C]yt\-dlp test video\f[R] and id \f[C]BaW_jenozKc\f[R],
this will result in a \f[C]yt\-dlp test video\-BaW_jenozKc.mp4\f[R] file
created in the current directory.
.PP
Note that some of the sequences are not guaranteed to be present since
they depend on the metadata obtained by a particular extractor.
Such sequences will be replaced with placeholder value provided with
\f[C]\-\-output\-na\-placeholder\f[R] (\f[C]NA\f[R] by default).
.PP
\f[B]Tip\f[R]: Look at the \f[C]\-j\f[R] output to identify which fields
are available for the purticular URL
.PP
For numeric sequences you can use numeric related
formatting (https://docs.python.org/3/library/stdtypes.html#printf-style-string-formatting),
for example, \f[C]%(view_count)05d\f[R] will result in a string with
view count padded with zeros up to 5 characters, like in
\f[C]00042\f[R].
.PP
Output templates can also contain arbitrary hierarchical path, e.g.
\f[C]\-o \[aq]%(playlist)s/%(playlist_index)s \- %(title)s.%(ext)s\[aq]\f[R]
which will result in downloading each video in a directory corresponding
to this path template.
Any missing directory will be automatically created for you.
.PP
To use percent literals in an output template use \f[C]%%\f[R].
To output to stdout use \f[C]\-o \-\f[R].
.PP
The current default template is \f[C]%(title)s [%(id)s].%(ext)s\f[R].
.PP
In some cases, you don\[aq]t want special characters such as \[u4E2D],
spaces, or &, such as when transferring the downloaded filename to a
Windows system or the filename through an 8bit\-unsafe channel.
In these cases, add the \f[C]\-\-restrict\-filenames\f[R] flag to get a
shorter title:
.SS Output template and Windows batch files
.PP
If you are using an output template inside a Windows batch file then you
must escape plain percent characters (\f[C]%\f[R]) by doubling, so that
\f[C]\-o \[dq]%(title)s\-%(id)s.%(ext)s\[dq]\f[R] should become
\f[C]\-o \[dq]%%(title)s\-%%(id)s.%%(ext)s\[dq]\f[R].
However you should not touch \f[C]%\f[R]\[aq]s that are not plain
characters, e.g.
environment variables for expansion should stay intact:
\f[C]\-o \[dq]C:\[rs]%HOMEPATH%\[rs]Desktop\[rs]%%(title)s.%%(ext)s\[dq]\f[R].
.SS Output template examples
.PP
Note that on Windows you need to use double quotes instead of single.
.IP
.nf
\f[C]
$ yt\-dlp \-\-get\-filename \-o \[aq]%(title)s.%(ext)s\[aq] BaW_jenozKc
youtube\-dl test video \[aq]\[aq]_\[:a]\[u21AD]\[u1D550].mp4    # All kinds of weird characters

$ yt\-dlp \-\-get\-filename \-o \[aq]%(title)s.%(ext)s\[aq] BaW_jenozKc \-\-restrict\-filenames
youtube\-dl_test_video_.mp4          # A simple file name

# Download YouTube playlist videos in separate directory indexed by video order in a playlist
$ yt\-dlp \-o \[aq]%(playlist)s/%(playlist_index)s \- %(title)s.%(ext)s\[aq] https://www.youtube.com/playlist?list=PLwiyx1dc3P2JR9N8gQaQN_BCvlSlap7re

# Download YouTube playlist videos in separate directories according to their uploaded year
$ yt\-dlp \-o \[aq]%(upload_date>%Y)s/%(title)s.%(ext)s\[aq] https://www.youtube.com/playlist?list=PLwiyx1dc3P2JR9N8gQaQN_BCvlSlap7re

# Download all playlists of YouTube channel/user keeping each playlist in separate directory:
$ yt\-dlp \-o \[aq]%(uploader)s/%(playlist)s/%(playlist_index)s \- %(title)s.%(ext)s\[aq] https://www.youtube.com/user/TheLinuxFoundation/playlists

# Download Udemy course keeping each chapter in separate directory under MyVideos directory in your home
$ yt\-dlp \-u user \-p password \-P \[aq]\[ti]/MyVideos\[aq] \-o \[aq]%(playlist)s/%(chapter_number)s \- %(chapter)s/%(title)s.%(ext)s\[aq] https://www.udemy.com/java\-tutorial/

# Download entire series season keeping each series and each season in separate directory under C:/MyVideos
$ yt\-dlp \-P \[dq]C:/MyVideos\[dq] \-o \[dq]%(series)s/%(season_number)s \- %(season)s/%(episode_number)s \- %(episode)s.%(ext)s\[dq] https://videomore.ru/kino_v_detalayah/5_sezon/367617

# Stream the video being downloaded to stdout
$ yt\-dlp \-o \- BaW_jenozKc
\f[R]
.fi
.SH FORMAT SELECTION
.PP
By default, yt\-dlp tries to download the best available quality if you
\f[B]don\[aq]t\f[R] pass any options.
This is generally equivalent to using
\f[C]\-f bestvideo*+bestaudio/best\f[R].
However, if multiple audiostreams is enabled
(\f[C]\-\-audio\-multistreams\f[R]), the default format changes to
\f[C]\-f bestvideo+bestaudio/best\f[R].
Similarly, if ffmpeg is unavailable, or if you use yt\-dlp to stream to
\f[C]stdout\f[R] (\f[C]\-o \-\f[R]), the default becomes
\f[C]\-f best/bestvideo+bestaudio\f[R].
.PP
\f[B]Deprecation warning\f[R]: Latest versions of yt\-dlp can stream
multiple formats to the stdout simultaneously using ffmpeg.
So, in future versions, the default for this will be set to
\f[C]\-f bv*+ba/b\f[R] similar to normal downloads.
If you want to preserve the \f[C]\-f b/bv+ba\f[R] setting, it is
recommended to explicitly specify it in the configuration options.
.PP
The general syntax for format selection is \f[C]\-f FORMAT\f[R] (or
\f[C]\-\-format FORMAT\f[R]) where \f[C]FORMAT\f[R] is a \f[I]selector
expression\f[R], i.e.
an expression that describes format or formats you would like to
download.
.PP
\f[B]tl;dr:\f[R] navigate me to examples.
.PP
The simplest case is requesting a specific format, for example with
\f[C]\-f 22\f[R] you can download the format with format code equal to
22.
You can get the list of available format codes for particular video
using \f[C]\-\-list\-formats\f[R] or \f[C]\-F\f[R].
Note that these format codes are extractor specific.
.PP
You can also use a file extension (currently \f[C]3gp\f[R],
\f[C]aac\f[R], \f[C]flv\f[R], \f[C]m4a\f[R], \f[C]mp3\f[R],
\f[C]mp4\f[R], \f[C]ogg\f[R], \f[C]wav\f[R], \f[C]webm\f[R] are
supported) to download the best quality format of a particular file
extension served as a single file, e.g.
\f[C]\-f webm\f[R] will download the best quality format with the
\f[C]webm\f[R] extension served as a single file.
.PP
You can also use special names to select particular edge case formats:
.IP \[bu] 2
\f[C]all\f[R]: Select all formats
.IP \[bu] 2
\f[C]mergeall\f[R]: Select and merge all formats (Must be used with
\f[C]\-\-audio\-multistreams\f[R], \f[C]\-\-video\-multistreams\f[R] or
both)
.IP \[bu] 2
\f[C]b*\f[R], \f[C]best*\f[R]: Select the best quality format
irrespective of whether it contains video or audio
.IP \[bu] 2
\f[C]w*\f[R], \f[C]worst*\f[R]: Select the worst quality format
irrespective of whether it contains video or audio
.IP \[bu] 2
\f[C]b\f[R], \f[C]best\f[R]: Select the best quality format that
contains both video and audio.
Equivalent to \f[C]best*[vcodec!=none][acodec!=none]\f[R]
.IP \[bu] 2
\f[C]w\f[R], \f[C]worst\f[R]: Select the worst quality format that
contains both video and audio.
Equivalent to \f[C]worst*[vcodec!=none][acodec!=none]\f[R]
.IP \[bu] 2
\f[C]bv\f[R], \f[C]bestvideo\f[R]: Select the best quality video\-only
format.
Equivalent to \f[C]best*[acodec=none]\f[R]
.IP \[bu] 2
\f[C]wv\f[R], \f[C]worstvideo\f[R]: Select the worst quality video\-only
format.
Equivalent to \f[C]worst*[acodec=none]\f[R]
.IP \[bu] 2
\f[C]bv*\f[R], \f[C]bestvideo*\f[R]: Select the best quality format that
contains video.
It may also contain audio.
Equivalent to \f[C]best*[vcodec!=none]\f[R]
.IP \[bu] 2
\f[C]wv*\f[R], \f[C]worstvideo*\f[R]: Select the worst quality format
that contains video.
It may also contain audio.
Equivalent to \f[C]worst*[vcodec!=none]\f[R]
.IP \[bu] 2
\f[C]ba\f[R], \f[C]bestaudio\f[R]: Select the best quality audio\-only
format.
Equivalent to \f[C]best*[vcodec=none]\f[R]
.IP \[bu] 2
\f[C]wa\f[R], \f[C]worstaudio\f[R]: Select the worst quality audio\-only
format.
Equivalent to \f[C]worst*[vcodec=none]\f[R]
.IP \[bu] 2
\f[C]ba*\f[R], \f[C]bestaudio*\f[R]: Select the best quality format that
contains audio.
It may also contain video.
Equivalent to \f[C]best*[acodec!=none]\f[R]
.IP \[bu] 2
\f[C]wa*\f[R], \f[C]worstaudio*\f[R]: Select the worst quality format
that contains audio.
It may also contain video.
Equivalent to \f[C]worst*[acodec!=none]\f[R]
.PP
For example, to download the worst quality video\-only format you can
use \f[C]\-f worstvideo\f[R].
It is however recommended not to use \f[C]worst\f[R] and related
options.
When your format selector is \f[C]worst\f[R], the format which is worst
in all respects is selected.
Most of the time, what you actually want is the video with the smallest
filesize instead.
So it is generally better to use
\f[C]\-f best \-S +size,+br,+res,+fps\f[R] instead of
\f[C]\-f worst\f[R].
See sorting formats for more details.
.PP
You can select the n\[aq]th best format of a type by using
\f[C]best<type>.<n>\f[R].
For example, \f[C]best.2\f[R] will select the 2nd best combined format.
Similarly, \f[C]bv*.3\f[R] will select the 3rd best format that contains
a video stream.
.PP
If you want to download multiple videos and they don\[aq]t have the same
formats available, you can specify the order of preference using
slashes.
Note that formats on the left hand side are preferred, for example
\f[C]\-f 22/17/18\f[R] will download format 22 if it\[aq]s available,
otherwise it will download format 17 if it\[aq]s available, otherwise it
will download format 18 if it\[aq]s available, otherwise it will
complain that no suitable formats are available for download.
.PP
If you want to download several formats of the same video use a comma as
a separator, e.g.
\f[C]\-f 22,17,18\f[R] will download all these three formats, of course
if they are available.
Or a more sophisticated example combined with the precedence feature:
\f[C]\-f 136/137/mp4/bestvideo,140/m4a/bestaudio\f[R].
.PP
You can merge the video and audio of multiple formats into a single file
using \f[C]\-f <format1>+<format2>+...\f[R] (requires ffmpeg installed),
for example \f[C]\-f bestvideo+bestaudio\f[R] will download the best
video\-only format, the best audio\-only format and mux them together
with ffmpeg.
.PP
\f[B]Deprecation warning\f[R]: Since the \f[I]below\f[R] described
behavior is complex and counter\-intuitive, this will be removed and
multistreams will be enabled by default in the future.
A new operator will be instead added to limit formats to single
audio/video
.PP
Unless \f[C]\-\-video\-multistreams\f[R] is used, all formats with a
video stream except the first one are ignored.
Similarly, unless \f[C]\-\-audio\-multistreams\f[R] is used, all formats
with an audio stream except the first one are ignored.
For example,
\f[C]\-f bestvideo+best+bestaudio \-\-video\-multistreams \-\-audio\-multistreams\f[R]
will download and merge all 3 given formats.
The resulting file will have 2 video streams and 2 audio streams.
But \f[C]\-f bestvideo+best+bestaudio \-\-no\-video\-multistreams\f[R]
will download and merge only \f[C]bestvideo\f[R] and
\f[C]bestaudio\f[R].
\f[C]best\f[R] is ignored since another format containing a video stream
(\f[C]bestvideo\f[R]) has already been selected.
The order of the formats is therefore important.
\f[C]\-f best+bestaudio \-\-no\-audio\-multistreams\f[R] will download
and merge both formats while
\f[C]\-f bestaudio+best \-\-no\-audio\-multistreams\f[R] will ignore
\f[C]best\f[R] and download only \f[C]bestaudio\f[R].
.SS Filtering Formats
.PP
You can also filter the video formats by putting a condition in
brackets, as in \f[C]\-f \[dq]best[height=720]\[dq]\f[R] (or
\f[C]\-f \[dq][filesize>10M]\[dq]\f[R]).
.PP
The following numeric meta fields can be used with comparisons
\f[C]<\f[R], \f[C]<=\f[R], \f[C]>\f[R], \f[C]>=\f[R], \f[C]=\f[R]
(equals), \f[C]!=\f[R] (not equals):
.IP \[bu] 2
\f[C]filesize\f[R]: The number of bytes, if known in advance
.IP \[bu] 2
\f[C]width\f[R]: Width of the video, if known
.IP \[bu] 2
\f[C]height\f[R]: Height of the video, if known
.IP \[bu] 2
\f[C]tbr\f[R]: Average bitrate of audio and video in KBit/s
.IP \[bu] 2
\f[C]abr\f[R]: Average audio bitrate in KBit/s
.IP \[bu] 2
\f[C]vbr\f[R]: Average video bitrate in KBit/s
.IP \[bu] 2
\f[C]asr\f[R]: Audio sampling rate in Hertz
.IP \[bu] 2
\f[C]fps\f[R]: Frame rate
.PP
Also filtering work for comparisons \f[C]=\f[R] (equals),
\f[C]\[ha]=\f[R] (starts with), \f[C]$=\f[R] (ends with), \f[C]*=\f[R]
(contains) and following string meta fields:
.IP \[bu] 2
\f[C]ext\f[R]: File extension
.IP \[bu] 2
\f[C]acodec\f[R]: Name of the audio codec in use
.IP \[bu] 2
\f[C]vcodec\f[R]: Name of the video codec in use
.IP \[bu] 2
\f[C]container\f[R]: Name of the container format
.IP \[bu] 2
\f[C]protocol\f[R]: The protocol that will be used for the actual
download, lower\-case (\f[C]http\f[R], \f[C]https\f[R], \f[C]rtsp\f[R],
\f[C]rtmp\f[R], \f[C]rtmpe\f[R], \f[C]mms\f[R], \f[C]f4m\f[R],
\f[C]ism\f[R], \f[C]http_dash_segments\f[R], \f[C]m3u8\f[R], or
\f[C]m3u8_native\f[R])
.IP \[bu] 2
\f[C]format_id\f[R]: A short description of the format
.IP \[bu] 2
\f[C]language\f[R]: Language code
.PP
Any string comparison may be prefixed with negation \f[C]!\f[R] in order
to produce an opposite comparison, e.g.
\f[C]!*=\f[R] (does not contain).
.PP
Note that none of the aforementioned meta fields are guaranteed to be
present since this solely depends on the metadata obtained by particular
extractor, i.e.
the metadata offered by the website.
Any other field made available by the extractor can also be used for
filtering.
.PP
Formats for which the value is not known are excluded unless you put a
question mark (\f[C]?\f[R]) after the operator.
You can combine format filters, so
\f[C]\-f \[dq][height<=?720][tbr>500]\[dq]\f[R] selects up to 720p
videos (or videos where the height is not known) with a bitrate of at
least 500 KBit/s.
You can also use the filters with \f[C]all\f[R] to download all formats
that satisfy the filter.
For example, \f[C]\-f \[dq]all[vcodec=none]\[dq]\f[R] selects all
audio\-only formats.
.PP
Format selectors can also be grouped using parentheses, for example if
you want to download the best mp4 and webm formats with a height lower
than 480 you can use \f[C]\-f \[aq](mp4,webm)[height<480]\[aq]\f[R].
.SS Sorting Formats
.PP
You can change the criteria for being considered the \f[C]best\f[R] by
using \f[C]\-S\f[R] (\f[C]\-\-format\-sort\f[R]).
The general format for this is
\f[C]\-\-format\-sort field1,field2...\f[R].
.PP
The available fields are:
.IP \[bu] 2
\f[C]hasvid\f[R]: Gives priority to formats that has a video stream
.IP \[bu] 2
\f[C]hasaud\f[R]: Gives priority to formats that has a audio stream
.IP \[bu] 2
\f[C]ie_pref\f[R]: The format preference as given by the extractor
.IP \[bu] 2
\f[C]lang\f[R]: Language preference as given by the extractor
.IP \[bu] 2
\f[C]quality\f[R]: The quality of the format as given by the extractor
.IP \[bu] 2
\f[C]source\f[R]: Preference of the source as given by the extractor
.IP \[bu] 2
\f[C]proto\f[R]: Protocol used for download
(\f[C]https\f[R]/\f[C]ftps\f[R] > \f[C]http\f[R]/\f[C]ftp\f[R] >
\f[C]m3u8_native\f[R]/\f[C]m3u8\f[R] > \f[C]http_dash_segments\f[R]>
\f[C]websocket_frag\f[R] > other > \f[C]mms\f[R]/\f[C]rtsp\f[R] >
unknown > \f[C]f4f\f[R]/\f[C]f4m\f[R])
.IP \[bu] 2
\f[C]vcodec\f[R]: Video Codec (\f[C]av01\f[R] > \f[C]vp9.2\f[R] >
\f[C]vp9\f[R] > \f[C]h265\f[R] > \f[C]h264\f[R] > \f[C]vp8\f[R] >
\f[C]h263\f[R] > \f[C]theora\f[R] > other > unknown)
.IP \[bu] 2
\f[C]acodec\f[R]: Audio Codec (\f[C]opus\f[R] > \f[C]vorbis\f[R] >
\f[C]aac\f[R] > \f[C]mp4a\f[R] > \f[C]mp3\f[R] > \f[C]ac3\f[R] >
\f[C]dts\f[R] > other > unknown)
.IP \[bu] 2
\f[C]codec\f[R]: Equivalent to \f[C]vcodec,acodec\f[R]
.IP \[bu] 2
\f[C]vext\f[R]: Video Extension (\f[C]mp4\f[R] > \f[C]webm\f[R] >
\f[C]flv\f[R] > other > unknown).
If \f[C]\-\-prefer\-free\-formats\f[R] is used, \f[C]webm\f[R] is
prefered.
.IP \[bu] 2
\f[C]aext\f[R]: Audio Extension (\f[C]m4a\f[R] > \f[C]aac\f[R] >
\f[C]mp3\f[R] > \f[C]ogg\f[R] > \f[C]opus\f[R] > \f[C]webm\f[R] > other
> unknown).
If \f[C]\-\-prefer\-free\-formats\f[R] is used, the order changes to
\f[C]opus\f[R] > \f[C]ogg\f[R] > \f[C]webm\f[R] > \f[C]m4a\f[R] >
\f[C]mp3\f[R] > \f[C]aac\f[R].
.IP \[bu] 2
\f[C]ext\f[R]: Equivalent to \f[C]vext,aext\f[R]
.IP \[bu] 2
\f[C]filesize\f[R]: Exact filesize, if know in advance.
This will be unavailable for mu38 and DASH formats.
.IP \[bu] 2
\f[C]fs_approx\f[R]: Approximate filesize calculated from the manifests
.IP \[bu] 2
\f[C]size\f[R]: Exact filesize if available, otherwise approximate
filesize
.IP \[bu] 2
\f[C]height\f[R]: Height of video
.IP \[bu] 2
\f[C]width\f[R]: Width of video
.IP \[bu] 2
\f[C]res\f[R]: Video resolution, calculated as the smallest dimension.
.IP \[bu] 2
\f[C]fps\f[R]: Framerate of video
.IP \[bu] 2
\f[C]hdr\f[R]: The dynamic range of the video (\f[C]DV\f[R] >
\f[C]HDR12\f[R] > \f[C]HDR10+\f[R] > \f[C]HDR10\f[R] > \f[C]HLG\f[R] >
\f[C]SDR\f[R])
.IP \[bu] 2
\f[C]tbr\f[R]: Total average bitrate in KBit/s
.IP \[bu] 2
\f[C]vbr\f[R]: Average video bitrate in KBit/s
.IP \[bu] 2
\f[C]abr\f[R]: Average audio bitrate in KBit/s
.IP \[bu] 2
\f[C]br\f[R]: Equivalent to using \f[C]tbr,vbr,abr\f[R]
.IP \[bu] 2
\f[C]asr\f[R]: Audio sample rate in Hz
.PP
\f[B]Deprecation warning\f[R]: Many of these fields have (currently
undocumented) aliases, that may be removed in a future version.
It is recommended to use only the documented field names.
.PP
All fields, unless specified otherwise, are sorted in descending order.
To reverse this, prefix the field with a \f[C]+\f[R].
Eg: \f[C]+res\f[R] prefers format with the smallest resolution.
Additionally, you can suffix a preferred value for the fields, separated
by a \f[C]:\f[R].
Eg: \f[C]res:720\f[R] prefers larger videos, but no larger than 720p and
the smallest video if there are no videos less than 720p.
For \f[C]codec\f[R] and \f[C]ext\f[R], you can provide two preferred
values, the first for video and the second for audio.
Eg: \f[C]+codec:avc:m4a\f[R] (equivalent to
\f[C]+vcodec:avc,+acodec:m4a\f[R]) sets the video codec preference to
\f[C]h264\f[R] > \f[C]h265\f[R] > \f[C]vp9\f[R] > \f[C]vp9.2\f[R] >
\f[C]av01\f[R] > \f[C]vp8\f[R] > \f[C]h263\f[R] > \f[C]theora\f[R] and
audio codec preference to \f[C]mp4a\f[R] > \f[C]aac\f[R] >
\f[C]vorbis\f[R] > \f[C]opus\f[R] > \f[C]mp3\f[R] > \f[C]ac3\f[R] >
\f[C]dts\f[R].
You can also make the sorting prefer the nearest values to the provided
by using \f[C]\[ti]\f[R] as the delimiter.
Eg: \f[C]filesize\[ti]1G\f[R] prefers the format with filesize closest
to 1 GiB.
.PP
The fields \f[C]hasvid\f[R] and \f[C]ie_pref\f[R] are always given
highest priority in sorting, irrespective of the user\-defined order.
This behaviour can be changed by using
\f[C]\-\-format\-sort\-force\f[R].
Apart from these, the default order used is:
\f[C]lang,quality,res,fps,hdr:12,codec:vp9.2,size,br,asr,proto,ext,hasaud,source,id\f[R].
The extractors may override this default order, but they cannot override
the user\-provided order.
.PP
Note that the default has \f[C]codec:vp9.2\f[R]; i.e.
\f[C]av1\f[R] is not prefered.
Similarly, the default for hdr is \f[C]hdr:12\f[R]; i.e.
dolby vision is not prefered.
These choices are made since DV and AV1 formats are not yet fully
compatible with most devices.
This may be changed in the future as more devices become capable of
smoothly playing back these formats.
.PP
If your format selector is \f[C]worst\f[R], the last item is selected
after sorting.
This means it will select the format that is worst in all respects.
Most of the time, what you actually want is the video with the smallest
filesize instead.
So it is generally better to use
\f[C]\-f best \-S +size,+br,+res,+fps\f[R].
.PP
\f[B]Tip\f[R]: You can use the \f[C]\-v \-F\f[R] to see how the formats
have been sorted (worst to best).
.SS Format Selection examples
.PP
Note that on Windows you may need to use double quotes instead of
single.
.IP
.nf
\f[C]
# Download and merge the best video\-only format and the best audio\-only format,
# or download the best combined format if video\-only format is not available
$ yt\-dlp \-f \[aq]bv+ba/b\[aq]

# Download best format that contains video,
# and if it doesn\[aq]t already have an audio stream, merge it with best audio\-only format
$ yt\-dlp \-f \[aq]bv*+ba/b\[aq]

# Same as above
$ yt\-dlp

# Download the best video\-only format and the best audio\-only format without merging them
# For this case, an output template should be used since
# by default, bestvideo and bestaudio will have the same file name.
$ yt\-dlp \-f \[aq]bv,ba\[aq] \-o \[aq]%(title)s.f%(format_id)s.%(ext)s\[aq]

# Download and merge the best format that has a video stream,
# and all audio\-only formats into one file
$ yt\-dlp \-f \[aq]bv*+mergeall[vcodec=none]\[aq] \-\-audio\-multistreams

# Download and merge the best format that has a video stream,
# and the best 2 audio\-only formats into one file
$ yt\-dlp \-f \[aq]bv*+ba+ba.2\[aq] \-\-audio\-multistreams


# The following examples show the old method (without \-S) of format selection
# and how to use \-S to achieve a similar but (generally) better result

# Download the worst video available (old method)
$ yt\-dlp \-f \[aq]wv*+wa/w\[aq]

# Download the best video available but with the smallest resolution
$ yt\-dlp \-S \[aq]+res\[aq]

# Download the smallest video available
$ yt\-dlp \-S \[aq]+size,+br\[aq]



# Download the best mp4 video available, or the best video if no mp4 available
$ yt\-dlp \-f \[aq]bv*[ext=mp4]+ba[ext=m4a]/b[ext=mp4] / bv*+ba/b\[aq]

# Download the best video with the best extension
# (For video, mp4 > webm > flv. For audio, m4a > aac > mp3 ...)
$ yt\-dlp \-S \[aq]ext\[aq]



# Download the best video available but no better than 480p,
# or the worst video if there is no video under 480p
$ yt\-dlp \-f \[aq]bv*[height<=480]+ba/b[height<=480] / wv*+ba/w\[aq]

# Download the best video available with the largest height but no better than 480p,
# or the best video with the smallest resolution if there is no video under 480p
$ yt\-dlp \-S \[aq]height:480\[aq]

# Download the best video available with the largest resolution but no better than 480p,
# or the best video with the smallest resolution if there is no video under 480p
# Resolution is determined by using the smallest dimension.
# So this works correctly for vertical videos as well
$ yt\-dlp \-S \[aq]res:480\[aq]



# Download the best video (that also has audio) but no bigger than 50 MB,
# or the worst video (that also has audio) if there is no video under 50 MB
$ yt\-dlp \-f \[aq]b[filesize<50M] / w\[aq]

# Download largest video (that also has audio) but no bigger than 50 MB,
# or the smallest video (that also has audio) if there is no video under 50 MB
$ yt\-dlp \-f \[aq]b\[aq] \-S \[aq]filesize:50M\[aq]

# Download best video (that also has audio) that is closest in size to 50 MB
$ yt\-dlp \-f \[aq]b\[aq] \-S \[aq]filesize\[ti]50M\[aq]



# Download best video available via direct link over HTTP/HTTPS protocol,
# or the best video available via any protocol if there is no such video
$ yt\-dlp \-f \[aq](bv*+ba/b)[protocol\[ha]=http][protocol!*=dash] / (bv*+ba/b)\[aq]

# Download best video available via the best protocol
# (https/ftps > http/ftp > m3u8_native > m3u8 > http_dash_segments ...)
$ yt\-dlp \-S \[aq]proto\[aq]



# Download the best video with h264 codec, or the best video if there is no such video
$ yt\-dlp \-f \[aq](bv*+ba/b)[vcodec\[ha]=avc1] / (bv*+ba/b)\[aq]

# Download the best video with best codec no better than h264,
# or the best video with worst codec if there is no such video
$ yt\-dlp \-S \[aq]codec:h264\[aq]

# Download the best video with worst codec no worse than h264,
# or the best video with best codec if there is no such video
$ yt\-dlp \-S \[aq]+codec:h264\[aq]



# More complex examples

# Download the best video no better than 720p preferring framerate greater than 30,
# or the worst video (still preferring framerate greater than 30) if there is no such video
$ yt\-dlp \-f \[aq]((bv*[fps>30]/bv*)[height<=720]/(wv*[fps>30]/wv*)) + ba / (b[fps>30]/b)[height<=720]/(w[fps>30]/w)\[aq]

# Download the video with the largest resolution no better than 720p,
# or the video with the smallest resolution available if there is no such video,
# preferring larger framerate for formats with the same resolution
$ yt\-dlp \-S \[aq]res:720,fps\[aq]



# Download the video with smallest resolution no worse than 480p,
# or the video with the largest resolution available if there is no such video,
# preferring better codec and then larger total bitrate for the same resolution
$ yt\-dlp \-S \[aq]+res:480,codec,br\[aq]
\f[R]
.fi
.SH MODIFYING METADATA
.PP
The metadata obtained the the extractors can be modified by using
\f[C]\-\-parse\-metadata\f[R] and \f[C]\-\-replace\-in\-metadata\f[R]
.PP
\f[C]\-\-replace\-in\-metadata FIELDS REGEX REPLACE\f[R] is used to
replace text in any metadata field using python regular
expression (https://docs.python.org/3/library/re.html#regular-expression-syntax).
Backreferences (https://docs.python.org/3/library/re.html?highlight=backreferences#re.sub)
can be used in the replace string for advanced use.
.PP
The general syntax of \f[C]\-\-parse\-metadata FROM:TO\f[R] is to give
the name of a field or an output template to extract data from, and the
format to interpret it as, separated by a colon \f[C]:\f[R].
Either a python regular
expression (https://docs.python.org/3/library/re.html#regular-expression-syntax)
with named capture groups or a similar syntax to the output template
(only \f[C]%(field)s\f[R] formatting is supported) can be used for
\f[C]TO\f[R].
The option can be used multiple times to parse and modify various
fields.
.PP
Note that any field created by this can be used in the output template
and will also affect the media file\[aq]s metadata added when using
\f[C]\-\-add\-metadata\f[R].
.PP
This option also has a few special uses: * You can download an
additional URL based on the metadata of the currently downloaded video.
To do this, set the field \f[C]additional_urls\f[R] to the URL that you
want to download.
Eg:
\f[C]\-\-parse\-metadata \[dq]description:(?P<additional_urls>https?://www\[rs].vimeo\[rs].com/\[rs]d+)\f[R]
will download the first vimeo video found in the description * You can
use this to change the metadata that is embedded in the media file.
To do this, set the value of the corresponding field with a
\f[C]meta_\f[R] prefix.
For example, any value you set to \f[C]meta_description\f[R] field will
be added to the \f[C]description\f[R] field in the file.
For example, you can use this to set a different \[dq]description\[dq]
and \[dq]synopsis\[dq].
Any value set to the \f[C]meta_\f[R] field will overwrite all default
values.
.PP
For reference, these are the fields yt\-dlp adds by default to the file
metadata:
.PP
.TS
tab(@);
l l.
T{
Metadata fields
T}@T{
From
T}
_
T{
\f[C]title\f[R]
T}@T{
\f[C]track\f[R] or \f[C]title\f[R]
T}
T{
\f[C]date\f[R]
T}@T{
\f[C]upload_date\f[R]
T}
T{
\f[C]description\f[R], \f[C]synopsis\f[R]
T}@T{
\f[C]description\f[R]
T}
T{
\f[C]purl\f[R], \f[C]comment\f[R]
T}@T{
\f[C]webpage_url\f[R]
T}
T{
\f[C]track\f[R]
T}@T{
\f[C]track_number\f[R]
T}
T{
\f[C]artist\f[R]
T}@T{
\f[C]artist\f[R], \f[C]creator\f[R], \f[C]uploader\f[R] or
\f[C]uploader_id\f[R]
T}
T{
\f[C]genre\f[R]
T}@T{
\f[C]genre\f[R]
T}
T{
\f[C]album\f[R]
T}@T{
\f[C]album\f[R]
T}
T{
\f[C]album_artist\f[R]
T}@T{
\f[C]album_artist\f[R]
T}
T{
\f[C]disc\f[R]
T}@T{
\f[C]disc_number\f[R]
T}
T{
\f[C]show\f[R]
T}@T{
\f[C]series\f[R]
T}
T{
\f[C]season_number\f[R]
T}@T{
\f[C]season_number\f[R]
T}
T{
\f[C]episode_id\f[R]
T}@T{
\f[C]episode\f[R] or \f[C]episode_id\f[R]
T}
T{
\f[C]episode_sort\f[R]
T}@T{
\f[C]episode_number\f[R]
T}
T{
\f[C]language\f[R] of each stream
T}@T{
From the format\[aq]s \f[C]language\f[R]
T}
.TE
.PP
\f[B]Note\f[R]: The file format may not support some of these fields
.SS Modifying metadata examples
.PP
Note that on Windows you may need to use double quotes instead of
single.
.IP
.nf
\f[C]
# Interpret the title as \[dq]Artist \- Title\[dq]
$ yt\-dlp \-\-parse\-metadata \[aq]title:%(artist)s \- %(title)s\[aq]

# Regex example
$ yt\-dlp \-\-parse\-metadata \[aq]description:Artist \- (?P<artist>.+)\[aq]

# Set title as \[dq]Series name S01E05\[dq]
$ yt\-dlp \-\-parse\-metadata \[aq]%(series)s S%(season_number)02dE%(episode_number)02d:%(title)s\[aq]

# Set \[dq]comment\[dq] field in video metadata using description instead of webpage_url
$ yt\-dlp \-\-parse\-metadata \[aq]description:(?s)(?P<meta_comment>.+)\[aq] \-\-add\-metadata

# Replace all spaces and \[dq]_\[dq] in title and uploader with a \[ga]\-\[ga]
$ yt\-dlp \-\-replace\-in\-metadata \[aq]title,uploader\[aq] \[aq][ _]\[aq] \[aq]\-\[aq]
\f[R]
.fi
.SH EXTRACTOR ARGUMENTS
.PP
Some extractors accept additional arguments which can be passed using
\f[C]\-\-extractor\-args KEY:ARGS\f[R].
\f[C]ARGS\f[R] is a \f[C];\f[R] (semicolon) seperated string of
\f[C]ARG=VAL1,VAL2\f[R].
Eg:
\f[C]\-\-extractor\-args \[dq]youtube:player_client=android_agegate,web;include_live_dash\[dq] \-\-extractor\-args \[dq]funimation:version=uncut\[dq]\f[R]
.PP
The following extractors use this feature: * \f[B]youtube\f[R] *
\f[C]skip\f[R]: \f[C]hls\f[R] or \f[C]dash\f[R] (or both) to skip
download of the respective manifests * \f[C]player_client\f[R]: Clients
to extract video data from.
The main clients are \f[C]web\f[R], \f[C]android\f[R], \f[C]ios\f[R],
\f[C]mweb\f[R].
These also have \f[C]_music\f[R], \f[C]_embedded\f[R],
\f[C]_agegate\f[R], and \f[C]_creator\f[R] variants (Eg:
\f[C]web_embedded\f[R]) (\f[C]mweb\f[R] has only \f[C]_agegate\f[R]).
By default, \f[C]android,web\f[R] is used, but the agegate and creator
variants are added as required for age\-gated videos.
Similarly the music variants are added for \f[C]music.youtube.com\f[R]
urls.
You can also use \f[C]all\f[R] to use all the clients *
\f[C]player_skip\f[R]: Skip some network requests that are generally
needed for robust extraction.
One or more of \f[C]configs\f[R] (skip client configs),
\f[C]webpage\f[R] (skip initial webpage), \f[C]js\f[R] (skip js player).
While these options can help reduce the number of requests needed or
avoid some rate\-limiting, they could cause some issues.
See #860 (https://github.com/yt-dlp/yt-dlp/pull/860) for more details *
\f[C]include_live_dash\f[R]: Include live dash formats (These formats
don\[aq]t download properly) * \f[C]comment_sort\f[R]: \f[C]top\f[R] or
\f[C]new\f[R] (default) \- choose comment sorting mode (on YouTube\[aq]s
side).
* \f[C]max_comments\f[R]: Maximum amount of comments to download
(default all).
* \f[C]max_comment_depth\f[R]: Maximum depth for nested comments.
YouTube supports depths 1 or 2 (default).
* \f[B]youtubetab\f[R] (YouTube playlists, channels, feeds, etc.) *
\f[C]skip\f[R]: One or more of \f[C]webpage\f[R] (skip initial webpage
download), \f[C]authcheck\f[R] (allow the download of playlists
requiring authentication when no initial webpage is downloaded.
This may cause unwanted behavior, see
#1122 (https://github.com/yt-dlp/yt-dlp/pull/1122) for more details)
.IP \[bu] 2
\f[B]funimation\f[R]
.RS 2
.IP \[bu] 2
\f[C]language\f[R]: Languages to extract.
Eg: \f[C]funimation:language=english,japanese\f[R]
.IP \[bu] 2
\f[C]version\f[R]: The video version to extract \- \f[C]uncut\f[R] or
\f[C]simulcast\f[R]
.RE
.IP \[bu] 2
\f[B]vikiChannel\f[R]
.RS 2
.IP \[bu] 2
\f[C]video_types\f[R]: Types of videos to download \- one or more of
\f[C]episodes\f[R], \f[C]movies\f[R], \f[C]clips\f[R],
\f[C]trailers\f[R]
.RE
.PP
NOTE: These options may be changed/removed in the future without concern
for backward compatibility
.SH PLUGINS
.PP
Plugins are loaded from
\f[C]<root\-dir>/ytdlp_plugins/<type>/__init__.py\f[R]; where
\f[C]<root\-dir>\f[R] is the directory of the binary
(\f[C]<root\-dir>/yt\-dlp\f[R]), or the root directory of the module if
you are running directly from source\-code
(\f[C]<root dir>/yt_dlp/__main__.py\f[R]).
Plugins are currently not supported for the \f[C]pip\f[R] version
.PP
Plugins can be of \f[C]<type>\f[R]s \f[C]extractor\f[R] or
\f[C]postprocessor\f[R].
Extractor plugins do not need to be enabled from the CLI and are
automatically invoked when the input URL is suitable for it.
Postprocessor plugins can be invoked using
\f[C]\-\-use\-postprocessor NAME\f[R].
.PP
See <ytdlp_plugins> for example plugins.
.PP
Note that \f[B]all\f[R] plugins are imported even if not invoked, and
that \f[B]there are no checks\f[R] performed on plugin code.
Use plugins at your own risk and only if you trust the code
.PP
If you are a plugin author, add
ytdlp\-plugins (https://github.com/topics/ytdlp-plugins) as a topic to
your repository for discoverability
.SH EMBEDDING YT\-DLP
.PP
yt\-dlp makes the best effort to be a good command\-line program, and
thus should be callable from any programming language.
.PP
Your program should avoid parsing the normal stdout since they may
change in future versions.
Instead they should use options such as \f[C]\-J\f[R],
\f[C]\-\-print\f[R], \f[C]\-\-progress\-template\f[R],
\f[C]\-\-exec\f[R] etc to create console output that you can reliably
reproduce and parse.
.PP
From a Python program, you can embed yt\-dlp in a more powerful fashion,
like this:
.IP
.nf
\f[C]
import yt_dlp

ydl_opts = {}
with yt_dlp.YoutubeDL(ydl_opts) as ydl:
    ydl.download([\[aq]https://www.youtube.com/watch?v=BaW_jenozKc\[aq]])
\f[R]
.fi
.PP
Most likely, you\[aq]ll want to use various options.
For a list of options available, have a look at
\f[C]yt_dlp/YoutubeDL.py\f[R] (yt_dlp/YoutubeDL.py#L154-L452).
.PP
Here\[aq]s a more complete example of a program that outputs only errors
(and a short message after the download is finished), converts the video
to an mp3 file, implements a custom postprocessor and prints the final
info_dict as json:
.IP
.nf
\f[C]
import json

import yt_dlp
from yt_dlp.postprocessor.common import PostProcessor


class MyLogger:
    def debug(self, msg):
        # For compatability with youtube\-dl, both debug and info are passed into debug
        # You can distinguish them by the prefix \[aq][debug] \[aq]
        if msg.startswith(\[aq][debug] \[aq]):
            pass
        else:
            self.info(msg)

    def info(self, msg):
        pass

    def warning(self, msg):
        pass

    def error(self, msg):
        print(msg)


class MyCustomPP(PostProcessor):
    def run(self, info):
        self.to_screen(\[aq]Doing stuff\[aq])
        return [], info


def my_hook(d):
    if d[\[aq]status\[aq]] == \[aq]finished\[aq]:
        print(\[aq]Done downloading, now converting ...\[aq])


ydl_opts = {
    \[aq]format\[aq]: \[aq]bestaudio/best\[aq],
    \[aq]postprocessors\[aq]: [{
        \[aq]key\[aq]: \[aq]FFmpegExtractAudio\[aq],
        \[aq]preferredcodec\[aq]: \[aq]mp3\[aq],
        \[aq]preferredquality\[aq]: \[aq]192\[aq],
    }],
    \[aq]logger\[aq]: MyLogger(),
    \[aq]progress_hooks\[aq]: [my_hook],
}

with yt_dlp.YoutubeDL(ydl_opts) as ydl:
    ydl.add_post_processor(MyCustomPP())
    info = ydl.extract_info(\[aq]https://www.youtube.com/watch?v=BaW_jenozKc\[aq])
    print(json.dumps(ydl.sanitize_info(info)))
\f[R]
.fi
.PP
See the public functions in
\f[C]yt_dlp/YoutubeDL.py\f[R] (yt_dlp/YoutubeDL.py) for other available
functions.
Eg: \f[C]ydl.download\f[R], \f[C]ydl.download_with_info_file\f[R]
.PP
\f[B]Tip\f[R]: If you are porting your code from youtube\-dl to yt\-dlp,
one important point to look out for is that we do not guarantee the
return value of \f[C]YoutubeDL.extract_info\f[R] to be json
serializable, or even be a dictionary.
It will be dictionary\-like, but if you want to ensure it is a
serializable dictionary, pass it through
\f[C]YoutubeDL.sanitize_info\f[R] as shown in the example above
.SH DEPRECATED OPTIONS
.PP
These are all the deprecated options and the current alternative to
achieve the same effect
.SS Redundant options
.PP
While these options are redundant, they are still expected to be used
due to their ease of use
.IP
.nf
\f[C]
\-\-get\-description                \-\-print description
\-\-get\-duration                   \-\-print duration_string
\-\-get\-filename                   \-\-print filename
\-\-get\-format                     \-\-print format
\-\-get\-id                         \-\-print id
\-\-get\-thumbnail                  \-\-print thumbnail
\-e, \-\-get\-title                  \-\-print title
\-g, \-\-get\-url                    \-\-print urls
\-j, \-\-dump\-json                  \-\-print \[dq]%()j\[dq]
\-\-match\-title REGEX              \-\-match\-filter \[dq]title \[ti]= (?i)REGEX\[dq]
\-\-reject\-title REGEX             \-\-match\-filter \[dq]title !\[ti]= (?i)REGEX\[dq]
\-\-min\-views COUNT                \-\-match\-filter \[dq]view_count >=? COUNT\[dq]
\-\-max\-views COUNT                \-\-match\-filter \[dq]view_count <=? COUNT\[dq]
\f[R]
.fi
.SS Not recommended
.PP
While these options still work, their use is not recommended since there
are other alternatives to achieve the same
.IP
.nf
\f[C]
\-\-all\-formats                    \-f all
\-\-all\-subs                       \-\-sub\-langs all \-\-write\-subs
\-\-print\-json                     \-j \-\-no\-simulate
\-\-autonumber\-size NUMBER         Use string formatting. Eg: %(autonumber)03d
\-\-autonumber\-start NUMBER        Use internal field formatting like %(autonumber+NUMBER)s
\-\-id                             \-o \[dq]%(id)s.%(ext)s\[dq]
\-\-metadata\-from\-title FORMAT     \-\-parse\-metadata \[dq]%(title)s:FORMAT\[dq]
\-\-hls\-prefer\-native              \-\-downloader \[dq]m3u8:native\[dq]
\-\-hls\-prefer\-ffmpeg              \-\-downloader \[dq]m3u8:ffmpeg\[dq]
\-\-list\-formats\-old               \-\-compat\-options list\-formats (Alias: \-\-no\-list\-formats\-as\-table)
\-\-list\-formats\-as\-table          \-\-compat\-options \-list\-formats [Default] (Alias: \-\-no\-list\-formats\-old)
\-\-youtube\-skip\-dash\-manifest     \-\-extractor\-args \[dq]youtube:skip=dash\[dq] (Alias: \-\-no\-youtube\-include\-dash\-manifest)
\-\-youtube\-skip\-hls\-manifest      \-\-extractor\-args \[dq]youtube:skip=hls\[dq] (Alias: \-\-no\-youtube\-include\-hls\-manifest)
\-\-youtube\-include\-dash\-manifest  Default (Alias: \-\-no\-youtube\-skip\-dash\-manifest)
\-\-youtube\-include\-hls\-manifest   Default (Alias: \-\-no\-youtube\-skip\-hls\-manifest)
\f[R]
.fi
.SS Developer options
.PP
These options are not intended to be used by the end\-user
.IP
.nf
\f[C]
\-\-test                           Download only part of video for testing extractors
\-\-youtube\-print\-sig\-code         For testing youtube signatures
\-\-allow\-unplayable\-formats       List unplayable formats also
\-\-no\-allow\-unplayable\-formats    Default
\f[R]
.fi
.SS Old aliases
.PP
These are aliases that are no longer documented for various reasons
.IP
.nf
\f[C]
\-\-avconv\-location                \-\-ffmpeg\-location
\-\-cn\-verification\-proxy URL      \-\-geo\-verification\-proxy URL
\-\-dump\-headers                   \-\-print\-traffic
\-\-dump\-intermediate\-pages        \-\-dump\-pages
\-\-force\-write\-download\-archive   \-\-force\-write\-archive
\-\-load\-info                      \-\-load\-info\-json
\-\-no\-split\-tracks                \-\-no\-split\-chapters
\-\-no\-write\-srt                   \-\-no\-write\-subs
\-\-prefer\-unsecure                \-\-prefer\-insecure
\-\-rate\-limit RATE                \-\-limit\-rate RATE
\-\-split\-tracks                   \-\-split\-chapters
\-\-srt\-lang LANGS                 \-\-sub\-langs LANGS
\-\-trim\-file\-names LENGTH         \-\-trim\-filenames LENGTH
\-\-write\-srt                      \-\-write\-subs
\-\-yes\-overwrites                 \-\-force\-overwrites
\f[R]
.fi
.SS Sponskrub Options
.PP
Support for SponSkrub (https://github.com/faissaloo/SponSkrub) has been
deprecated in favor of \f[C]\-\-sponsorblock\f[R]
.IP
.nf
\f[C]
\-\-sponskrub                      \-\-sponsorblock\-mark all
\-\-no\-sponskrub                   \-\-no\-sponsorblock
\-\-sponskrub\-cut                  \-\-sponsorblock\-remove all
\-\-no\-sponskrub\-cut               \-\-sponsorblock\-remove \-all
\-\-sponskrub\-force                Not applicable
\-\-no\-sponskrub\-force             Not applicable
\-\-sponskrub\-location             Not applicable
\-\-sponskrub\-args                 Not applicable
\f[R]
.fi
.SS No longer supported
.PP
These options may no longer work as intended
.IP
.nf
\f[C]
\-\-prefer\-avconv                  avconv is not officially supported by yt\-dlp (Alias: \-\-no\-prefer\-ffmpeg)
\-\-prefer\-ffmpeg                  Default (Alias: \-\-no\-prefer\-avconv)
\-C, \-\-call\-home                  Not implemented
\-\-no\-call\-home                   Default
\-\-include\-ads                    No longer supported
\-\-no\-include\-ads                 Default
\-\-write\-annotations              No supported site has annotations now
\-\-no\-write\-annotations           Default
\f[R]
.fi
.SS Removed
.PP
These options were deprecated since 2014 and have now been entirely
removed
.IP
.nf
\f[C]
\-A, \-\-auto\-number                \-o \[dq]%(autonumber)s\-%(id)s.%(ext)s\[dq]
\-t, \-\-title                      \-o \[dq]%(title)s\-%(id)s.%(ext)s\[dq]
\-l, \-\-literal                    \-o accepts literal names
\f[R]
.fi
.SH CONTRIBUTING
.PP
See CONTRIBUTING.md (CONTRIBUTING.md#contributing-to-yt-dlp) for
instructions on Opening an Issue (CONTRIBUTING.md#opening-an-issue) and
Contributing code to the
project (CONTRIBUTING.md#developer-instructions)
.SH MORE
.PP
For FAQ see the youtube\-dl
README (https://github.com/ytdl-org/youtube-dl#faq)
